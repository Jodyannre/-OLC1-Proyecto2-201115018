/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,27],$V2=[1,31],$V3=[1,30],$V4=[1,28],$V5=[1,29],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,18],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[5,9,74,75,76,86,87,88,91,92,94,97,102,107,108,109],$Vg=[1,35],$Vh=[1,41],$Vi=[1,42],$Vj=[1,40],$Vk=[9,19,81],$Vl=[5,9,22,25,26,27,28,29,30,31,54,56,67,74,75,76,85,86,87,88,91,92,94,97,100,101,102,107,108,109],$Vm=[1,62],$Vn=[1,61],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,71],$Vu=[1,70],$Vv=[1,89],$Vw=[1,95],$Vx=[1,100],$Vy=[1,101],$Vz=[1,111],$VA=[1,115],$VB=[1,116],$VC=[44,85],$VD=[13,14,15,16,17,18,19,20,29,35,36,37,38,39,44,55,77,78,85,105],$VE=[2,21],$VF=[2,26],$VG=[13,14,15,16,17,18,19,20,29,35,36,37,38,39,44,55,77,78,82,85,105],$VH=[1,154],$VI=[1,155],$VJ=[1,156],$VK=[1,157],$VL=[1,158],$VM=[1,159],$VN=[1,149],$VO=[1,148],$VP=[1,150],$VQ=[1,151],$VR=[1,152],$VS=[1,153],$VT=[44,55,77],$VU=[1,167],$VV=[1,168],$VW=[9,22,25,26,27,28,29,30,31],$VX=[85,100,101],$VY=[9,54,56,67,74,75,76,85,86,87,88,91,92,94,97,100,101,102,108,109],$VZ=[15,16,17,18,19,20],$V_=[5,9,54,56,67,74,75,76,85,86,87,88,91,92,94,97,100,101,102,107,108,109],$V$=[13,14,15,16,17,18,19,20,29,35,36,37,38,39,44,55,71,77,78,85,105],$V01=[55,83],$V11=[44,55],$V21=[13,14,44,55,77],$V31=[2,3],$V41=[2,5],$V51=[2,8],$V61=[1,293],$V71=[1,296],$V81=[1,297];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones_globales":4,"EOF":5,"condiciones_logicas":6,"condicion_comparacion":7,"operadores_logicos":8,"ID":9,"condicion_logica":10,"expresion":11,"operadores_comparacion":12,"OR":13,"AND":14,"MAYOR_I":15,"MENOR_I":16,"DIFERENTE":17,"IGUAL":18,"MAYOR":19,"MENOR":20,"numero":21,"NOT":22,"acceso_lista":23,"acceso_vector":24,"CADENA":25,"CARACTER":26,"TRUE":27,"FALSE":28,"MENOS":29,"DECIMAL":30,"ENTERO":31,"operacion_aritmetica":32,"operadores_aritmeticos":33,"operacion_aritmetica_validador":34,"MAS":35,"POR":36,"DIV":37,"POTENCIA":38,"MOD":39,"expresion_incremento":40,"metodos_nativos":41,"LENGTH":42,"PARENTESIS_A":43,"PARENTESIS_C":44,"TRUNCATE":45,"TYPEOF":46,"TO_STRING":47,"TO_CHAR_ARRAY":48,"ROUND":49,"instruccion_global":50,"instrucciones_locales":51,"instruccion_local":52,"instruccion_local_metodo":53,"CONTINUE":54,"PUNTOCOMA":55,"BREAK":56,"instrucciones_locales_metodo":57,"creacion_variable":58,"asignacion_variable":59,"manejo_vector_lista":60,"ciclo_for":61,"ciclo_do_while":62,"ciclo_while":63,"condicion_if":64,"condicion_switch":65,"llamada_metodo_funcion":66,"RETURN":67,"declaracion_funcion_metodo":68,"asignacion_tipo":69,"asignacion_valor_variable":70,"ASIGNACION":71,"TO_UPPER":72,"TO_LOWER":73,"INT":74,"CHAR":75,"DOUBLE":76,"TERNARIO":77,"DOSPUNTOS":78,"asignacion_valor_vector":79,"NEW":80,"CORCHETE_A":81,"CORCHETE_C":82,"LLAVE_A":83,"elementos_coma":84,"LLAVE_C":85,"BOOLEAN":86,"STRING":87,"FOR":88,"ciclo_for_variable":89,"ciclo_for_incremento":90,"DO":91,"WHILE":92,"ciclo_while_condicion":93,"IF":94,"condicion_if_else":95,"ELSE":96,"SWITCH":97,"condiciones_case_switch":98,"condicion_case":99,"CASE":100,"DEFAULT":101,"LISTA":102,"PUNTO":103,"ADD":104,"COMA":105,"definicion_parametros":106,"VOID":107,"PRINT":108,"EXEC":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"ID",13:"OR",14:"AND",15:"MAYOR_I",16:"MENOR_I",17:"DIFERENTE",18:"IGUAL",19:"MAYOR",20:"MENOR",22:"NOT",25:"CADENA",26:"CARACTER",27:"TRUE",28:"FALSE",29:"MENOS",30:"DECIMAL",31:"ENTERO",35:"MAS",36:"POR",37:"DIV",38:"POTENCIA",39:"MOD",42:"LENGTH",43:"PARENTESIS_A",44:"PARENTESIS_C",45:"TRUNCATE",46:"TYPEOF",47:"TO_STRING",48:"TO_CHAR_ARRAY",49:"ROUND",54:"CONTINUE",55:"PUNTOCOMA",56:"BREAK",67:"RETURN",71:"ASIGNACION",72:"TO_UPPER",73:"TO_LOWER",74:"INT",75:"CHAR",76:"DOUBLE",77:"TERNARIO",78:"DOSPUNTOS",80:"NEW",81:"CORCHETE_A",82:"CORCHETE_C",83:"LLAVE_A",85:"LLAVE_C",86:"BOOLEAN",87:"STRING",88:"FOR",91:"DO",92:"WHILE",94:"IF",96:"ELSE",97:"SWITCH",100:"CASE",101:"DEFAULT",102:"LISTA",103:"PUNTO",104:"ADD",105:"COMA",107:"VOID",108:"PRINT",109:"EXEC"},
productions_: [0,[3,2],[6,3],[6,3],[6,3],[6,3],[6,1],[6,1],[10,3],[10,3],[7,3],[8,1],[8,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[21,2],[21,2],[21,1],[21,1],[32,3],[34,1],[34,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[40,3],[40,3],[40,3],[40,3],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[41,4],[4,2],[4,1],[51,2],[51,1],[52,1],[52,2],[52,2],[57,2],[57,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,3],[53,3],[53,3],[53,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[58,2],[59,2],[59,2],[59,2],[70,1],[70,3],[70,6],[70,6],[70,6],[70,6],[70,6],[70,6],[70,6],[70,3],[70,7],[70,3],[79,7],[79,5],[69,1],[69,1],[69,1],[69,1],[69,1],[61,9],[61,10],[89,1],[89,1],[90,3],[90,3],[90,3],[62,7],[62,8],[93,2],[93,2],[93,2],[63,5],[63,6],[64,6],[64,5],[64,7],[64,6],[95,4],[95,3],[95,2],[65,7],[98,2],[98,1],[99,3],[99,4],[99,2],[99,3],[60,11],[60,9],[60,12],[60,7],[84,3],[84,1],[24,4],[23,6],[68,7],[68,8],[68,6],[68,7],[68,7],[68,8],[68,6],[68,7],[106,4],[106,2],[66,5],[66,4],[66,5],[66,5],[66,6],[66,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(this.$)
break;
case 2: case 3: case 4: case 5: case 8: case 9: case 10: case 32: case 41: case 42: case 43: case 44: case 78: case 79: case 97: case 105: case 107: case 119: case 120: case 121: case 134: case 139: case 142: case 147:
this.$ = $$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 6: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 30: case 31: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 61: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 96: case 110: case 111: case 112: case 113: case 114: case 117: case 118: case 138:
this.$ = $$[$0]+''
break;
case 7: case 148:
this.$ = $$[$0]
break;
case 20: case 28: case 29: case 60: case 67: case 92: case 93: case 94: case 95: case 124: case 125: case 126: case 135: case 137: case 141: case 160:
this.$ = $$[$0-1]+' '+$$[$0]
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 133: case 140: case 149: case 159: case 162:
this.$ = $$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 80:
this.$ = $$[$0-2]+' '+$$[$0-1]
break;
case 81:
this.$ = $$[$0-1]+''
break;
case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 128: case 129: case 132: case 150: case 153: case 157:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 106: case 108: case 131: case 136: case 146: case 151: case 154: case 155: case 158:
this.$ = $$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 109: case 127: case 130: case 161: case 163: case 164:
this.$ = $$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 115: case 144:
this.$ = $$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 116:
this.$ = $$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 122:
this.$ = $$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+''+$$[$0]
break;
case 123:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+''+$$[$0-1]+''+$$[$0]
break;
case 143:
this.$ = $$[$0-10]+' '+$$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 145:
this.$ = $$[$0-11]+' '+$$[$0-10]+' '+$$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 152: case 156:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 165:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+''+$$[$0]
break;
case 166:
this.$ = $$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]
break;
}
},
table: [{3:1,4:2,9:$V0,23:16,24:17,50:3,58:4,59:5,60:6,61:7,62:8,63:9,64:10,65:11,66:13,68:12,69:14,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,107:$Vc,108:$Vd,109:$Ve},{1:[3]},{5:[1,32]},{4:33,5:[2,61],9:$V0,23:16,24:17,50:3,58:4,59:5,60:6,61:7,62:8,63:9,64:10,65:11,66:13,68:12,69:14,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,107:$Vc,108:$Vd,109:$Ve},o($Vf,[2,82]),o($Vf,[2,83]),o($Vf,[2,84]),o($Vf,[2,85]),o($Vf,[2,86]),o($Vf,[2,87]),o($Vf,[2,88]),o($Vf,[2,89]),o($Vf,[2,90]),o($Vf,[2,91]),{9:[1,36],23:16,24:17,59:34,81:$Vg},{43:[1,39],55:$Vh,70:37,71:$Vi,81:$Vj,103:[1,38]},{55:$Vh,70:43,71:$Vi},{55:$Vh,70:44,71:$Vi},{20:[1,45]},{43:[1,46]},{83:[1,47]},{43:[1,48]},{43:[1,49]},{43:[1,50]},{9:[1,51]},{43:[1,52]},{9:[1,53]},o($Vk,[2,110]),o($Vk,[2,111]),o($Vk,[2,112]),o($Vk,[2,113]),o($Vk,[2,114]),{1:[2,1]},{5:[2,60]},o($Vl,[2,92]),{82:[1,54]},{43:[1,55],55:$Vh,70:37,71:$Vi,81:$Vj},o($Vl,[2,93]),{104:[1,56]},{9:$Vm,11:59,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,44:[1,58],84:57},{21:73,29:$Vs,30:$Vt,31:$Vu,81:[1,72]},o($Vl,[2,96]),{6:79,7:87,9:$Vv,10:88,11:80,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:74,41:78,42:[1,81],43:[1,77],45:[1,82],46:[1,83],47:[1,84],48:[1,85],49:[1,86],72:[1,75],73:[1,76]},o($Vl,[2,94]),o($Vl,[2,95]),{69:90,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5},{9:$Vw,23:16,24:17,58:92,59:93,69:94,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,89:91},{9:$V0,23:16,24:17,51:97,52:98,53:99,54:$Vx,56:$Vy,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,96],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},{6:114,7:87,9:$VA,10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$VB,28:$Vr,29:$Vs,30:$Vt,31:$Vu,93:113},{6:114,7:87,9:$VA,10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$VB,28:$Vr,29:$Vs,30:$Vt,31:$Vu,93:118},{9:[1,119]},{43:[1,120]},{9:[1,122],25:[1,121]},{43:[1,123]},{9:[1,124]},{44:[1,126],69:127,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,106:125},{43:[1,128]},{44:[1,129]},{55:[1,130]},o($VC,[2,148],{105:[1,131]}),o($VD,[2,19]),{9:[1,132]},o([13,14,29,35,36,37,38,39,44,55,77,78,85,105],$VE,{81:$Vj}),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,$VF),o($VD,[2,27]),{30:[1,133],31:[1,134]},o($VG,[2,30]),o($VG,[2,31]),{21:135,29:$Vs,30:$Vt,31:$Vu},{82:[1,136]},{55:[1,137]},{43:[1,138]},{43:[1,139]},{74:[1,140],75:[1,141],76:[1,142]},{55:[1,143]},{77:[1,144]},{12:147,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,29:$VN,33:146,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,55:[1,145]},{43:[1,160]},{43:[1,161]},{43:[1,162]},{43:[1,163]},{43:[1,164]},{43:[1,165]},o($VT,[2,6],{8:166,13:$VU,14:$VV}),o($VT,[2,7],{8:169,13:$VU,14:$VV}),o([15,16,17,18,19,20,29,35,36,37,38,39,55],$VE,{8:170,13:$VU,14:$VV,81:$Vj}),{19:[1,171]},{6:172,7:87,9:$Vv,10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},o($VW,[2,117]),o($VW,[2,118]),{9:$Vw,23:16,24:17,59:34},{55:$Vh,70:37,71:$Vi,81:$Vj},{92:[1,173]},{85:[1,174]},o($VX,[2,63],{23:16,24:17,52:98,53:99,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,69:112,51:175,9:$V0,54:$Vx,56:$Vy,67:$Vz,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve}),o($VY,[2,64]),{55:[1,176]},{55:[1,177]},o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),o($VY,[2,73]),o($VY,[2,74]),o($VY,[2,75]),o($VY,[2,76]),o($VY,[2,77]),{6:179,7:87,9:$Vv,10:88,11:180,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:178,55:[1,181]},{9:$Vw,23:16,24:17,59:34,81:$Vg},{83:[1,182]},{44:[1,183]},o($VZ,$VE,{8:170,13:$VU,14:$VV,44:[1,184],81:$Vj}),o($VZ,$VF,{44:[1,185]}),{12:147,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM},{83:[1,186]},{44:[1,187]},{44:[1,189],69:127,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,106:188},{44:[1,190]},{44:[1,191]},{9:$Vm,11:59,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,44:[1,193],84:192},{71:[1,194]},{44:[1,195]},{83:[1,196]},{9:[1,197]},{9:$Vm,11:198,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{55:[1,199]},o($V_,[2,162]),{9:$Vm,11:59,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,84:200},o($VD,[2,20]),o($VG,[2,28]),o($VG,[2,29]),{82:[1,201]},o($V$,[2,149]),o($Vl,[2,97]),{9:[1,203],25:[1,202]},{9:[1,205],25:[1,204]},{44:[1,206]},{44:[1,207]},{44:[1,208]},o($Vl,[2,105]),{9:$Vm,11:209,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},o($Vl,[2,107]),{9:$Vm,11:212,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:211,34:210},{9:$Vm,11:213,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},o($VW,[2,35]),o($VW,[2,36]),o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,13]),o($VW,[2,14]),o($VW,[2,15]),o($VW,[2,16]),o($VW,[2,17]),o($VW,[2,18]),{9:[1,217],23:215,24:216,25:[1,214]},{9:[1,219],21:218,29:$Vs,30:$Vt,31:$Vu},{9:$Vm,11:220,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{9:[1,221],21:222,27:[1,223],28:[1,224],29:$Vs,30:$Vt,31:$Vu},{9:[1,226],25:[1,225]},{9:[1,228],30:[1,227]},{6:229,7:87,9:[1,230],10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},o($VW,[2,11]),o($VW,[2,12]),{6:231,7:87,9:[1,232],10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{7:234,9:[1,233],11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{9:[1,235]},{55:[1,236]},{43:[1,237]},{92:[1,238]},o($VX,[2,62]),o($VY,[2,65]),o($VY,[2,66]),{55:[1,239]},{55:[1,240]},{12:147,15:$VH,16:$VI,17:$VJ,18:$VK,19:$VL,20:$VM,29:$VN,33:146,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,55:[1,241]},o($VY,[2,81]),{9:$V0,23:16,24:17,51:243,52:98,53:99,54:$Vx,56:$Vy,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,242],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},o($V01,[2,124]),o($V01,[2,125]),o($V01,[2,126]),{9:$V0,23:16,24:17,51:244,52:98,53:99,54:$Vx,56:$Vy,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,245],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},{83:[1,246]},{44:[1,247]},{83:[1,248]},{55:[1,249]},{55:[1,250]},{44:[1,251]},{55:[1,252]},{80:[1,253],83:[1,254]},{83:[1,255]},{9:$V0,23:16,24:17,53:258,57:257,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,256],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},{44:[2,160],105:[1,259]},{44:[1,260]},o($V_,[2,161]),o($VC,[2,147]),{82:[1,261]},{44:[1,262]},{44:[1,263]},{44:[1,264]},{44:[1,265]},{9:$Vm,11:266,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{9:$Vm,11:267,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{9:$Vm,11:268,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{78:[1,269]},o($V11,[2,32]),o($V11,[2,33]),o($V11,[2,34],{33:146,29:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS}),o($V21,[2,10]),{44:[1,270]},{44:[1,271]},{44:[1,272]},{44:[1,273],81:$Vj},{44:[1,274]},{44:[1,275]},{44:[1,276]},{44:[1,277]},{44:[1,278]},{44:[1,279]},{44:[1,280]},{44:[1,281]},{44:[1,282]},{44:[1,283]},{44:[1,284]},o($VT,[2,2]),o($VZ,$VE,{8:170,13:$VU,14:$VV,44:$V31,55:$V31,77:$V31,81:$Vj}),o($VT,[2,4]),o($VZ,$VE,{8:170,13:$VU,14:$VV,44:$V41,55:$V41,77:$V41,81:$Vj}),o($VZ,$VE,{13:$V51,14:$V51,44:$V51,55:$V51,77:$V51,81:$Vj}),o($V21,[2,9]),{71:[1,285]},{9:[1,287],90:286},{6:114,7:87,9:$VA,10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$VB,28:$Vr,29:$Vs,30:$Vt,31:$Vu,93:288},{43:[1,289]},o($VY,[2,78]),o($VY,[2,79]),o($VY,[2,80]),o($V_,[2,127]),{85:[1,290]},{85:[1,291]},o($V_,[2,130],{95:292,96:$V61}),{98:294,99:295,100:$V71,101:$V81},{83:[1,298]},{9:$V0,23:16,24:17,53:258,57:300,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,299],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},o($V_,[2,163]),o($V_,[2,164]),{55:[1,301]},o($V_,[2,166]),{69:302,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5},{9:$Vm,11:59,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,84:303},{9:$V0,23:16,24:17,53:258,57:305,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,304],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},o($Vf,[2,153]),{85:[1,306]},{9:$V0,23:16,24:17,53:258,57:307,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[2,68],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},{69:127,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,106:308},{55:[1,309]},o($V$,[2,150]),{55:[1,310]},{55:[1,311]},{55:[1,312]},{55:[1,313]},{55:[1,314]},{55:[1,315]},{55:[1,316]},{9:$Vm,11:317,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu},{55:[2,45]},{55:[2,46]},{55:[2,47]},{55:[2,48]},{55:[2,49]},{55:[2,50]},{55:[2,51]},{55:[2,52]},{55:[2,53]},{55:[2,54]},{55:[2,55]},{55:[2,56]},{55:[2,57]},{55:[2,58]},{55:[2,59]},{80:[1,318]},{44:[1,319]},{29:[1,321],35:[1,322],71:[1,320]},{55:[1,323]},{6:114,7:87,9:$VA,10:88,11:117,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$VB,28:$Vr,29:$Vs,30:$Vt,31:$Vu,93:324},o($V_,[2,128]),o($V_,[2,129],{95:325,96:$V61}),o($V_,[2,132]),{64:327,83:[1,326],94:$V9},{85:[1,328]},{85:[2,138],98:329,99:295,100:$V71,101:$V81},{31:[1,330]},{78:[1,331]},{9:$V0,23:16,24:17,53:258,57:333,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,332],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},o($Vf,[2,157]),{85:[1,334]},o($V_,[2,165]),{81:[1,335]},{85:[1,336]},o($Vf,[2,151]),{85:[1,337]},o($Vf,[2,154]),{85:[2,67]},{44:[2,159]},o($V_,[2,146]),o($Vl,[2,98]),o($Vl,[2,99]),o($Vl,[2,100]),o($Vl,[2,101]),o($Vl,[2,102]),o($Vl,[2,103]),o($Vl,[2,104]),{55:[1,338]},{102:[1,339]},{83:[1,340]},{9:$Vm,11:342,21:60,22:$Vn,23:63,24:64,25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:341},{29:[1,343]},{35:[1,344]},o($V_,[2,122]),{55:[1,345]},o($V_,[2,131]),{9:$V0,23:16,24:17,51:346,52:98,53:99,54:$Vx,56:$Vy,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,347],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},o($V_,[2,135]),o($V_,[2,136]),{85:[2,137]},{78:[1,348]},o($VX,[2,141],{23:16,24:17,52:98,53:99,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,69:112,51:349,9:$V0,54:$Vx,56:$Vy,67:$Vz,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve}),o($Vf,[2,155]),{85:[1,350]},o($Vf,[2,158]),{21:351,29:$Vs,30:$Vt,31:$Vu},{55:[1,352]},o($Vf,[2,152]),o($Vl,[2,106]),{20:[1,353]},{9:$V0,23:16,24:17,51:355,52:98,53:99,54:$Vx,56:$Vy,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,67:$Vz,69:112,74:$V1,75:$V2,76:$V3,85:[1,354],86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve},{44:[2,119]},{29:$VN,33:146,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS},{44:[2,120]},{44:[2,121]},o($V_,[2,123]),{85:[1,356]},o($V_,[2,134]),o($VX,[2,139],{23:16,24:17,52:98,53:99,58:102,59:103,60:104,61:105,62:106,63:107,64:108,65:109,66:110,69:112,51:357,9:$V0,54:$Vx,56:$Vy,67:$Vz,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5,88:$V6,91:$V7,92:$V8,94:$V9,97:$Va,102:$Vb,108:$Vd,109:$Ve}),o($VX,[2,142]),o($Vf,[2,156]),{82:[1,358]},o($V_,[2,144]),{69:359,74:$V1,75:$V2,76:$V3,86:$V4,87:$V5},o($V_,[2,115]),{85:[1,360]},o($V_,[2,133]),o($VX,[2,140]),{55:[1,361]},{19:[1,362]},o($V_,[2,116]),o($V_,[2,143]),{55:[1,363]},o($V_,[2,145])],
defaultActions: {32:[2,1],33:[2,60],270:[2,45],271:[2,46],272:[2,47],273:[2,48],274:[2,49],275:[2,50],276:[2,51],277:[2,52],278:[2,53],279:[2,54],280:[2,55],281:[2,56],282:[2,57],283:[2,58],284:[2,59],307:[2,67],308:[2,159],329:[2,137],341:[2,119],343:[2,120],344:[2,121]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/*Ignorar comentario multilínea*/
break;
case 2:/*Retornos de carro y nuevas líneas*/
break;
case 3:/*Saltos de línea*/
break;
case 4:/*Espacios en blanco*/
break;
case 5:return "IF";
break;
case 6:return "ELSE";
break;
case 7:return "FOR";
break;
case 8:return "WHILE";
break;
case 9:return "DO";
break;
case 10:return "SWITCH";
break;
case 11:return "CASE";
break;
case 12:return "DEFAULT";
break;
case 13:return "INT";
break;
case 14:return "DOUBLE";
break;
case 15:return "BOOLEAN";
break;
case 16:return "CHAR";
break;
case 17:return "STRING";
break;
case 18:return "CADENA";
break;
case 19:return "CARACTER";
break;
case 20:return "SALTO_LINEA_T";
break;
case 21:return "DOBLE_BARRA_T";
break;
case 22:return "COMILLAS_T";
break;
case 23:return "TABULADOR_T";
break;
case 24:return "COMILLA_T"
break;
case 25:return "COMILLA";
break;
case 26:return "COMILLAS";
break;
case 27:return "VOID";
break;
case 28:return "PRINT";
break;
case 29:return "TO_LOWER";
break;
case 30:return "TO_UPPER";
break;
case 31:return "LENGTH";
break;
case 32:return "ROUND";
break;
case 33:return "TYPEOF";
break;
case 34:return "TO_STRING";
break;
case 35:return "TO_CHAR_ARRAY";
break;
case 36:return "EXEC";
break;
case 37:return "TRUNCATE";
break;
case 38:return "CONTINUE";
break;
case 39:return "BREAK";
break;
case 40:return "RETURN";
break;
case 41:return 15;
break;
case 42:return 16;
break;
case 43:return 18;
break;
case 44:return 17;
break;
case 45:return 19;
break;
case 46:return 20;
break;
case 47:return "POTENCIA";
break;
case 48:return 35;
break;
case 49:return 29;
break;
case 50:return 36;
break;
case 51:return 37;
break;
case 52:return 39;
break;
case 53:return "ADD";
break;
case 54:return "NEW";
break;
case 55:return "LISTA";
break;
case 56:return 55;
break;
case 57:return 78;
break;
case 58:return 105;
break;
case 59:return 43;
break;
case 60:return 44;
break;
case 61:return 81;
break;
case 62:return 82;
break;
case 63:return 83;
break;
case 64:return 85;
break;
case 65:return "PUNTO";
break;
case 66:return 27;
break;
case 67:return 28;
break;
case 68:return 77;
break;
case 69:return 71;
break;
case 70:return 14;
break;
case 71:return 13;
break;
case 72:return 22;
break;
case 73:return 9;
break;
case 74:return 30;
break;
case 75:return 31;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:"[^\n\r]*")/i,/^(?:'[^\n\r]?')/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\\\')/i,/^(?:\\')/i,/^(?:")/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:truncate\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:add\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-z]([a-z]|[0-9])*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
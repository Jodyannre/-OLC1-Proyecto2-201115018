/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,6],$V2=[1,7],$V3=[1,17],$V4=[1,30],$V5=[1,34],$V6=[1,33],$V7=[1,31],$V8=[1,32],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,22],$Vf=[1,28],$Vg=[1,29],$Vh=[5,35,49,51,62,69,70,71,80,81,82,83,86,87,90,95,98,99,100,106,107],$Vi=[1,41],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,57],$Vt=[1,62],$Vu=[1,63],$Vv=[1,61],$Vw=[15,35,76],$Vx=[1,75],$Vy=[1,76],$Vz=[7,8,28,50,72,78],$VA=[1,78],$VB=[1,79],$VC=[1,81],$VD=[1,82],$VE=[7,8,11,12,13,14,15,16,28,50,72,78],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,28,50,72,73,78,80,103],$VO=[5,9,23,27,29,30,31,32,33,34,35,49,51,62,69,70,71,80,81,82,83,86,87,90,95,98,99,100,106,107],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[28,80],$VW=[9,23,27,29,30,31,32,33,34,35],$VX=[7,8,13,16,28,50,72,78],$VY=[7,8,11,12,13,14,15,16,20,21,22,23,24,25,26,28,50,72,73,78,80,103],$VZ=[7,8,11,12,13,14,15,16,23,24,25,26,28,50,72,73,78,80,103],$V_=[7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,28,50,66,72,73,78,80,103],$V$=[1,224],$V01=[1,225],$V11=[1,247],$V21=[5,35,49,51,62,69,70,71,80,81,82,83,86,87,90,94,95,98,99,100,106,107],$V31=[80,98,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instruccionTemp":4,"EOF":5,"condicion_logica":6,"AND":7,"OR":8,"NOT":9,"relacional":10,"MAYOR_I":11,"MENOR_I":12,"IGUAL":13,"MENOR":14,"MAYOR":15,"DIFERENTE":16,"expresion":17,"instrucciones_locales":18,"POTENCIA":19,"POR":20,"MOD":21,"DIV":22,"MENOS":23,"MAS":24,"INCREMENTO":25,"DECREMENTO":26,"PARENTESIS_A":27,"PARENTESIS_C":28,"ENTERO":29,"DECIMAL":30,"TRUE":31,"FALSE":32,"CADENA":33,"CARACTER":34,"ID":35,"acceso_vector":36,"acceso_lista":37,"metodos_nativos":38,"LENGTH":39,"TRUNCATE":40,"TYPEOF":41,"TO_STRING":42,"TO_CHAR_ARRAY":43,"ROUND":44,"instrucciones_globales":45,"instruccion_global":46,"instruccion_local":47,"instruccion_local_metodo":48,"CONTINUE":49,"PUNTOCOMA":50,"BREAK":51,"instrucciones_locales_metodo":52,"creacion_variable":53,"asignacion_variable":54,"manejo_vector_lista":55,"ciclo_for":56,"ciclo_do_while":57,"ciclo_while":58,"condicion_if":59,"condicion_switch":60,"llamada_metodo_funcion":61,"RETURN":62,"declaracion_funcion_metodo":63,"asignacion_tipo":64,"asignacion_valor_variable":65,"ASIGNACION":66,"TO_UPPER":67,"TO_LOWER":68,"INT":69,"CHAR":70,"DOUBLE":71,"TERNARIO":72,"DOSPUNTOS":73,"asignacion_valor_vector":74,"NEW":75,"CORCHETE_A":76,"CORCHETE_C":77,"LLAVE_A":78,"elementos_coma":79,"LLAVE_C":80,"BOOLEAN":81,"STRING":82,"FOR":83,"ciclo_for_variable":84,"ciclo_for_incremento":85,"DO":86,"WHILE":87,"ciclo_while_condicion":88,"condiciones_logicas":89,"IF":90,"condicion_else":91,"condiciones_if_else":92,"condicion_if_else":93,"ELSE":94,"SWITCH":95,"condiciones_case_switch":96,"condicion_case":97,"CASE":98,"DEFAULT":99,"LISTA":100,"PUNTO":101,"ADD":102,"COMA":103,"definicion_parametros":104,"VOID":105,"PRINT":106,"EXEC":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"AND",8:"OR",9:"NOT",11:"MAYOR_I",12:"MENOR_I",13:"IGUAL",14:"MENOR",15:"MAYOR",16:"DIFERENTE",19:"POTENCIA",20:"POR",21:"MOD",22:"DIV",23:"MENOS",24:"MAS",25:"INCREMENTO",26:"DECREMENTO",27:"PARENTESIS_A",28:"PARENTESIS_C",29:"ENTERO",30:"DECIMAL",31:"TRUE",32:"FALSE",33:"CADENA",34:"CARACTER",35:"ID",39:"LENGTH",40:"TRUNCATE",41:"TYPEOF",42:"TO_STRING",43:"TO_CHAR_ARRAY",44:"ROUND",49:"CONTINUE",50:"PUNTOCOMA",51:"BREAK",62:"RETURN",66:"ASIGNACION",67:"TO_UPPER",68:"TO_LOWER",69:"INT",70:"CHAR",71:"DOUBLE",72:"TERNARIO",73:"DOSPUNTOS",75:"NEW",76:"CORCHETE_A",77:"CORCHETE_C",78:"LLAVE_A",80:"LLAVE_C",81:"BOOLEAN",82:"STRING",83:"FOR",86:"DO",87:"WHILE",89:"condiciones_logicas",90:"IF",94:"ELSE",95:"SWITCH",98:"CASE",99:"DEFAULT",100:"LISTA",101:"PUNTO",102:"ADD",103:"COMA",105:"VOID",106:"PRINT",107:"EXEC"},
productions_: [0,[3,2],[6,3],[6,3],[6,2],[6,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[4,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[38,4],[38,4],[38,4],[38,4],[38,4],[38,4],[45,2],[45,1],[18,2],[18,1],[47,1],[47,2],[47,2],[52,2],[52,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[53,2],[54,2],[54,2],[54,2],[65,1],[65,3],[65,6],[65,6],[65,6],[65,6],[65,6],[65,3],[65,7],[74,7],[74,5],[64,1],[64,1],[64,1],[64,1],[64,1],[56,9],[56,10],[84,1],[84,1],[85,3],[85,2],[85,2],[57,8],[57,9],[88,2],[88,2],[88,2],[58,5],[58,6],[59,7],[59,6],[59,8],[59,7],[59,9],[59,8],[59,8],[59,7],[92,2],[92,1],[91,4],[91,3],[93,8],[93,7],[60,7],[96,2],[96,1],[97,3],[97,4],[97,2],[97,3],[55,11],[55,9],[55,12],[55,8],[55,7],[79,3],[79,1],[36,4],[37,6],[63,7],[63,8],[63,6],[63,7],[63,7],[63,8],[63,6],[63,7],[104,4],[104,2],[61,5],[61,4],[61,5],[61,6],[61,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = new Logica.default($$[$0-2],new Tipo.default(Tipo.tipos.AND),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0]); 
break;
case 3:
this.$ = new Logica.default($$[$0-2],new Tipo.default(Tipo.tipos.OR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0]); 
break;
case 4:
this.$ = new Logica.default($$[$0],new Tipo.default(Tipo.tipos.NOT),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 5: case 12: case 13: case 43: case 48: case 49: case 50: case 54: case 59: case 60: case 61: case 65: case 68:
this.$ = $$[$0]
break;
case 6:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MAYOR_I),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 7:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MENOR_I),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 8:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.IGUAL),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 9:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MENOR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 10:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MAYOR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 11:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.DIFERENTE),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 14:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.POTENCIA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 15:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.MULTIPLICACION),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 16:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.MODULO),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 17:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.DIVISION),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 18:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.RESTA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 19:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.SUMA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 20:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.NEGACION),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 21:
this.$ = new Aritmetica.default($$[$0-1],new Tipo.default(Tipo.tipos.INCREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22:
this.$ = new Aritmetica.default($$[$0-1],new Tipo.default(Tipo.tipos.DECREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23: case 57: case 93: case 120: case 123:
this.$ = $$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 24:
this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0],10), _$[$0].first_line, _$[$0].first_column); 
break;
case 25:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.DECIMAL),parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 26:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.BOOLEANO),true, _$[$0].first_line, _$[$0].first_column); 
break;
case 27:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.BOOLEANO),false, _$[$0].first_line, _$[$0].first_column); 
break;
case 28:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 29:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 30:
this.$ = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 31: case 32:
this.$ = $$[$0]+' '
break;
case 33:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearLength($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;
	
break;
case 34:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearTruncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 35:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearTypeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;			
	
break;
case 36:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;			
	
break;
case 37:

		var tipo = new Tipo.default(Tipo.tipos.LISTA); 
		var nodo = crearToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 38:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearRound($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 39:

		$$[$0-1].push($$[$0]); 
		this.$ = $$[$0-1]
	
break;
case 40: case 42: case 47:
this.$ = [$$[$0]]
break;
case 41: case 46:

		//$$[$0-1] = [$$[$0-1]];
		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	
break;
case 44: case 45: case 58: case 71: case 72: case 94: case 95: case 98: case 99: case 100: case 118: case 122: case 142:
this.$ = $$[$0-1]+' '+$$[$0]
break;
case 51: case 52: case 53: case 55: case 56: case 62: case 63: case 64: case 66: case 67: case 91: case 92: case 119:
this.$ = $$[$0]+''
break;
case 69:

											var id = $$[$0].getId();
											//var idNodo = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),id,_$[$0-1].first_line, _$[$0-1].first_column);
											this.$ = new Declaracion.default(id,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column,$$[$0],null);
											
break;
case 70:
 
		var id = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
		var asignacion = crearAsignacion(id,_$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
		this.$ = asignacion;
	
break;
case 73:
this.$ = null
break;
case 74: case 80:
this.$ = $$[$0-1]
break;
case 75:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToUpper($$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column, tipo);
		this.$ = nodo;
	
break;
case 76:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToLower($$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column, tipo);
		this.$ = nodo;
	
break;
case 77: case 78: case 79: case 102: case 132: case 135: case 139:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 81: case 82: case 117: case 128: case 133: case 136: case 137: case 140:
this.$ = $$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 83: case 101: case 143: case 147:
this.$ = $$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 84:
this.$ = new Tipo.default(Tipo.tipos.ENTERO); 
break;
case 85:
this.$ = new Tipo.default(Tipo.tipos.BOOLEANO); 
break;
case 86:
this.$ = new Tipo.default(Tipo.tipos.CADENA); 
break;
case 87:
this.$ = new Tipo.default(Tipo.tipos.DECIMAL); 
break;
case 88:
this.$ = new Tipo.default(Tipo.tipos.CARACTER); 
break;
case 89:
this.$ = $$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 90:
this.$ = $$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 96:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+''+$$[$0-1]
break;
case 97:
this.$ = $$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+''+$$[$0-2]+''+$$[$0-1]
break;
case 103:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],$$[$0-1],null);
		//pilaAuxiliar = [];
	
break;
case 104:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3],null,null);
		//pilaAuxiliar = [];
	
break;
case 105:

		//pilaAuxiliar.push($$[$0]);
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],$$[$0-2],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 106:

		//pilaAuxiliar.push($$[$0]);
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],null,pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 107:

		//pilaAuxiliar.push($$[$0])
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-3],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 108:

		//pilaAuxiliar.push($$[$0])
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],null,pilaAuxiliar); //duda
		//pilaAuxiliar = [];
	
break;
case 109:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],$$[$0-2],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 110:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],null,pilaAuxiliar); //duda
		//pilaAuxiliar = [];
	
break;
case 111: case 112:

		this.$ = pilaAuxiliar;
	
break;
case 113:

		var nuevo = new ELSE.default(new Tipo.default(Tipo.tipos.ELSE),_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-1]);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 114:

		var nuevo = new ELSE.default(new Tipo.default(Tipo.tipos.ELSE),_$[$0-2].first_line, _$[$0-2].first_column,null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 115:

		var nuevo = new IF.default(new Tipo.default(Tipo.tipos.ELSE_IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],$$[$0-1],null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 116:

		var nuevo = new IF.default(new Tipo.default(Tipo.tipos.ELSE_IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],null,null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 121: case 131: case 141: case 144:
this.$ = $$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 124:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-7],_$[$0-10].first_line, _$[$0-10].first_column);
		var v = crearVector($$[$0-10],_$[$0-10].first_line, _$[$0-10].first_column,id,$$[$0-2],$$[$0-4],null);
		this.$ = new Declaracion.default(v.getId(),new Tipo.default(Tipo.tipos.VECTOR),_$[$0-10].first_line, _$[$0-10].first_column,v,null);	
		
break;
case 125:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5],_$[$0-8].first_line, _$[$0-8].first_column);
		var v = crearVector($$[$0-8],_$[$0-8].first_line, _$[$0-8].first_column,id,0,$$[$0-8],$$[$0-2]);
		this.$ = new Declaracion.default(v.getId(),new Tipo.default(Tipo.tipos.VECTOR),_$[$0-8].first_line, _$[$0-8].first_column,v,null);
		
break;
case 126:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-7],_$[$0-11].first_line, _$[$0-11].first_column);
		var l =  new Lista.default($$[$0-9],_$[$0-11].first_line, _$[$0-11].first_column,id,$$[$0-2]);
		this.$ = new Declaracion.default(id,new Tipo.default(Tipo.tipos.LISTA),_$[$0-11].first_line, _$[$0-11].first_column,l,null);
		
break;
case 127:
	
		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-3],_$[$0-7].first_line, _$[$0-7].first_column);
		var l =  new Lista.default($$[$0-5],_$[$0-7].first_line, _$[$0-7].first_column,id,new Tipo.default(Tipo.tipos.CARACTER));
		var asignacion = crearAsignacion(id,_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-1]);
		this.$ = new Declaracion.default(id,new Tipo.default(Tipo.tipos.LISTA),_$[$0-7].first_line, _$[$0-7].first_column,asignacion,l);
	
break;
case 129:
pilaAuxiliar.push($$[$0-2]); this.$ = pilaAuxiliar
break;
case 130:
pilaAuxiliar.push($$[$0]); 
break;
case 134: case 138:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 145:
 this.$ = new Imprimir.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 146:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+''+$$[$0]
break;
}
},
table: [{3:1,4:2,18:3,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{1:[3]},{5:[1,35]},{5:[2,13],35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},o($Vh,[2,42]),o($Vh,[2,43]),{50:[1,37]},{50:[1,38]},o($Vh,[2,48]),o($Vh,[2,49]),o($Vh,[2,50]),o($Vh,[2,51]),o($Vh,[2,52]),o($Vh,[2,53]),o($Vh,[2,54]),o($Vh,[2,55]),o($Vh,[2,56]),{6:39,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,50:[1,40]},{35:$Vs,36:21,37:20,54:55,76:[1,56]},{27:[1,60],50:$Vt,65:58,66:$Vu,76:$Vv,101:[1,59]},{50:$Vt,65:64,66:$Vu},{50:$Vt,65:65,66:$Vu},{14:[1,66]},{27:[1,67]},{78:[1,68]},{27:[1,69]},{27:[1,70]},{27:[1,71]},{27:[1,72]},{35:[1,73]},o($Vw,[2,84]),o($Vw,[2,85]),o($Vw,[2,86]),o($Vw,[2,87]),o($Vw,[2,88]),{1:[2,1]},o($Vh,[2,41]),o($Vh,[2,44]),o($Vh,[2,45]),{7:$Vx,8:$Vy,50:[1,74]},o($Vh,[2,58]),{6:77,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($Vz,[2,5],{11:$VA,12:$VB,13:[1,80],14:$VC,15:$VD,16:[1,83]}),o($VE,[2,12],{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM}),{17:92,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{6:93,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($VN,[2,24]),o($VN,[2,25]),o($VN,[2,26]),o($VN,[2,27]),o($VN,[2,28]),o($VN,[2,29]),o($VN,[2,30],{76:$Vv}),o($VN,[2,31]),o($VN,[2,32]),o($VO,[2,69]),{77:[1,94]},{50:$Vt,65:58,66:$Vu,76:$Vv},o($VO,[2,70]),{102:[1,95]},{17:98,23:$Vj,27:$Vk,28:[1,97],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,79:96},{29:[1,100],76:[1,99]},o($VO,[2,73]),{6:101,9:$Vi,10:42,17:43,23:$Vj,27:[1,104],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,38:105,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT,44:$VU,67:[1,102],68:[1,103]},o($VO,[2,71]),o($VO,[2,72]),{64:112,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8},{35:$Vs,36:21,37:20,53:114,54:115,64:116,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,84:113},{18:118,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,117],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{6:119,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{6:120,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{35:[1,121]},{17:122,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{27:[1,123]},o($Vh,[2,57]),{6:124,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{6:125,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($Vz,[2,4]),{10:126,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{10:127,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{10:128,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{10:129,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{10:130,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{10:131,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:132,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:133,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:134,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:135,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:136,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:137,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($VN,[2,21]),o($VN,[2,22]),o($VN,[2,20]),{7:$Vx,8:$Vy,28:[1,138]},{35:[1,139]},{27:[1,140]},{28:[1,141]},{50:[1,142]},o($VV,[2,130],{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,103:[1,143]}),{29:[1,144]},{77:[1,145]},{7:$Vx,8:$Vy,50:[1,146],72:[1,147]},{27:[1,148]},{27:[1,149]},{6:93,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,69:[1,150],70:[1,151],71:[1,152]},{50:[1,153]},{27:[1,154]},{27:[1,155]},{27:[1,156]},{27:[1,157]},{27:[1,158]},{27:[1,159]},{15:[1,160]},{6:161,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($VW,[2,91]),o($VW,[2,92]),{35:$Vs,36:21,37:20,54:55},{87:[1,162]},{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,163],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{7:$Vx,8:$Vy,78:[1,164]},{7:$Vx,8:$Vy,28:[1,165]},{28:[1,166]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,167]},{17:98,23:$Vj,27:$Vk,28:[1,169],29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,79:168},o($Vz,[2,2]),o([8,28,50,72,78],[2,3],{7:$Vx}),o($VE,[2,6]),o($VE,[2,7]),o($VX,[2,8],{11:$VA,12:$VB,14:$VC,15:$VD}),o($VE,[2,9]),o($VE,[2,10]),o($VX,[2,11],{11:$VA,12:$VB,14:$VC,15:$VD}),o($VY,[2,14]),o($VY,[2,15],{19:$VF}),o($VY,[2,16],{19:$VF}),o($VY,[2,17],{19:$VF}),o($VZ,[2,18],{19:$VF,20:$VG,21:$VH,22:$VI}),o($VZ,[2,19],{19:$VF,20:$VG,21:$VH,22:$VI}),o($VN,[2,23]),{66:[1,170]},{17:171,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{50:[1,172]},o($Vh,[2,144]),{17:98,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,79:173},{77:[1,174]},o($V_,[2,131]),o($VO,[2,74]),{17:175,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{6:176,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{6:177,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{28:[1,178]},{28:[1,179]},{28:[1,180]},o($VO,[2,80]),{17:181,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:182,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:183,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:184,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:185,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:186,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{35:[1,187]},{7:$Vx,8:$Vy,50:[1,188]},{27:[1,189]},{87:[1,190]},{18:192,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,191],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{78:[1,193]},{78:[1,194]},{50:[1,195]},{28:[1,196]},{50:[1,197]},{75:[1,198],78:[1,199]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,200]},o($Vh,[2,143]),o($VV,[2,129]),{77:[1,201]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,73:[1,202]},{7:$Vx,8:$Vy,28:[1,203]},{7:$Vx,8:$Vy,28:[1,204]},{17:205,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:206,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{17:207,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,208]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,209]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,210]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,211]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,212]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[1,213]},{66:[1,214]},{35:[1,216],85:215},{6:217,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{27:[1,218]},o($Vh,[2,101]),{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,219],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{18:220,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,221],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{96:222,97:223,98:$V$,99:$V01},o($Vh,[2,145]),{50:[1,226]},o($Vh,[2,147]),{64:227,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8},{17:98,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54,79:228},{50:[1,229]},o($V_,[2,132]),{17:230,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{50:[1,231]},{50:[1,232]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,50:[1,233]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,50:[1,234]},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,50:[1,235]},{50:[2,33]},{50:[2,34]},{50:[2,35]},{50:[2,36]},{50:[2,37]},{50:[2,38]},{38:237,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT,44:$VU,75:[1,236]},{28:[1,238]},{25:[1,241],26:[1,240],66:[1,239]},{7:$Vx,8:$Vy,28:[1,242]},{6:243,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($Vh,[2,102]),{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,244],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},o($Vh,[2,104],{91:245,92:246,93:248,94:$V11}),{80:[1,249]},{80:[2,119],96:250,97:223,98:$V$,99:$V01},{29:[1,251]},{73:[1,252]},o($Vh,[2,146]),{76:[1,253]},{80:[1,254]},o($Vh,[2,128]),{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,50:[1,255]},o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,77]),o($VO,[2,78]),o($VO,[2,79]),{100:[1,256]},{50:[1,257]},{78:[1,258]},{17:259,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},{28:[2,94]},{28:[2,95]},{50:[1,260]},{7:$Vx,8:$Vy,28:[1,261]},o($Vh,[2,103],{93:248,91:262,92:263,94:$V11}),o($Vh,[2,106]),o($Vh,[2,110],{91:264,93:265,94:$V11}),{78:[1,266],90:[1,267]},o($V21,[2,112]),o($Vh,[2,117]),{80:[2,118]},{73:[1,268]},o($V31,[2,122],{47:4,48:5,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,64:18,37:20,36:21,18:269,35:$V0,49:$V1,51:$V2,62:$V3,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg}),{29:[1,270]},{50:[1,271]},o($VO,[2,81]),{14:[1,272]},o($Vh,[2,127]),{18:274,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,273],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{19:$VF,20:$VG,21:$VH,22:$VI,23:$VJ,24:$VK,25:$VL,26:$VM,28:[2,93]},o($Vh,[2,96]),{50:[1,275]},o($Vh,[2,105]),o($Vh,[2,109],{93:265,91:276,94:$V11}),o($Vh,[2,108]),o($V21,[2,111]),{18:277,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,278],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{27:[1,279]},o($V31,[2,120],{47:4,48:5,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,64:18,37:20,36:21,18:280,35:$V0,49:$V1,51:$V2,62:$V3,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg}),o($V31,[2,123],{48:5,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,64:18,37:20,36:21,47:36,35:$V0,49:$V1,51:$V2,62:$V3,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg}),{77:[1,281]},o($Vh,[2,125]),{64:282,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8},o($Vh,[2,89]),{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,283],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},o($Vh,[2,97]),o($Vh,[2,107]),{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,284],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},o($Vh,[2,114]),{6:285,9:$Vi,10:42,17:43,23:$Vj,27:$Vk,29:$Vl,30:$Vm,31:$Vn,32:$Vo,33:$Vp,34:$Vq,35:$Vr,36:53,37:54},o($V31,[2,121],{48:5,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,64:18,37:20,36:21,47:36,35:$V0,49:$V1,51:$V2,62:$V3,69:$V4,70:$V5,71:$V6,81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg}),{50:[1,286]},{15:[1,287]},o($Vh,[2,90]),o($Vh,[2,113]),{7:$Vx,8:$Vy,28:[1,288]},o($Vh,[2,124]),{50:[1,289]},{78:[1,290]},o($Vh,[2,126]),{18:291,35:$V0,36:21,37:20,47:4,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,292],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},{35:$V0,36:21,37:20,47:36,48:5,49:$V1,51:$V2,53:8,54:9,55:10,56:11,57:12,58:13,59:14,60:15,61:16,62:$V3,64:18,69:$V4,70:$V5,71:$V6,80:[1,293],81:$V7,82:$V8,83:$V9,86:$Va,87:$Vb,90:$Vc,95:$Vd,100:$Ve,106:$Vf,107:$Vg},o($V21,[2,116]),o($V21,[2,115])],
defaultActions: {35:[2,1],208:[2,33],209:[2,34],210:[2,35],211:[2,36],212:[2,37],213:[2,38],240:[2,94],241:[2,95],250:[2,118]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Excepcion = require('../Excepciones/Excepcion');
    const Tipo = require('../tablaSimbolos/Tipo');
    const Arbol = require('../tablaSimbolos/Arbol');
    const Primitivo = require('../Expresiones/Primitivo');
    const Imprimir = require('../Instrucciones/Imprimir');
	const Aritmetica = require('../Expresiones/Aritmetica');
	const Relacional = require('../Expresiones/Relacional');
	const Logica = require('../Expresiones/Logica');
	const Identificador = require('../Expresiones/Identificador');
	const Declaracion = require('../Expresiones/Declaracion');
	const Vector = require('../Expresiones/Vector');
	const Lista = require('../Expresiones/Lista');
	const toUpper = require('../Instrucciones/toUpper');
	const toLower = require('../Instrucciones/toLower');
	const Length = require('../Instrucciones/Length');
	const Truncate = require('../Instrucciones/Truncate');
	const Round = require('../Instrucciones/Round');
	const Typeof = require('../Instrucciones/Typeof');
	const ToString = require('../Instrucciones/toString');
	const ToCharArray = require('../Instrucciones/toCharArray');
	const Asignacion = require('../Expresiones/Asignacion');
	const IF = require('../Sentencias/IF');
	const ELSE = require('../Sentencias/ELSE');
	var pilaAuxiliar = [];


	function crearVector(tipo,linea,columna,id,size,tipo_creacion,valor){
		var nuevoVector = new Vector.default(tipo,linea,columna,id,parseInt(size),tipo_creacion,valor);
		//pilaAuxiliar = [];
		return nuevoVector;
	}

	function crearToUpper(expresion, linea, columna, retorno){
		var nuevoNodo = new toUpper.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearToLower(expresion, linea, columna, retorno){
		var nuevoNodo = new toLower.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearLength(expresion, linea, columna, retorno){
		var nuevoNodo = new Length.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearTruncate(expresion, linea, columna, retorno){
		var nuevoNodo = new Truncate.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearRound(expresion, linea, columna, retorno){
		var nuevoNodo = new Round.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearTypeof(expresion, linea, columna, retorno){
		var nuevoNodo = new Typeof.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearToString(expresion, linea, columna, retorno){
		var nuevoNodo = new ToString.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearToCharArray(expresion, linea, columna, retorno){
		var nuevoNodo = new ToCharArray.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}

	function crearAsignacion(id,linea,columna,instruccion){
		var tipo = new Tipo.default(Tipo.tipos.ASIGNACION);
		var nuevaAsignacion = new Asignacion.default(id,tipo,linea,columna,instruccion);
		//pilaAuxiliar = [];
		return nuevaAsignacion;
	}	


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/*Ignorar comentario multilínea*/
break;
case 2:/*Retornos de carro y nuevas líneas*/
break;
case 3:/*Saltos de línea*/
break;
case 4:/*Espacios en blanco*/
break;
case 5:return "IF";
break;
case 6:return "ELSE";
break;
case 7:return "FOR";
break;
case 8:return "WHILE";
break;
case 9:return "DO";
break;
case 10:return "SWITCH";
break;
case 11:return "CASE";
break;
case 12:return "DEFAULT";
break;
case 13:return "INT";
break;
case 14:return "DOUBLE";
break;
case 15:return "BOOLEAN";
break;
case 16:return "CHAR";
break;
case 17:return "STRING";
break;
case 18:yy_.yytext = yy_.yytext.substr(1,(yy_.yyleng-2)); return "CADENA";
break;
case 19:yy_.yytext = yy_.yytext.substr(1,(yy_.yyleng-2)); return "CARACTER";
break;
case 20:return "SALTO_LINEA_T";
break;
case 21:return "DOBLE_BARRA_T";
break;
case 22:return "COMILLAS_T";
break;
case 23:return "TABULADOR_T";
break;
case 24:return "COMILLA_T"
break;
case 25:return "COMILLA";
break;
case 26:return "COMILLAS";
break;
case 27:return "VOID";
break;
case 28:return "PRINT";
break;
case 29:return "TO_LOWER";
break;
case 30:return "TO_UPPER";
break;
case 31:return "LENGTH";
break;
case 32:return "ROUND";
break;
case 33:return "TYPEOF";
break;
case 34:return "TO_STRING";
break;
case 35:return "TO_CHAR_ARRAY";
break;
case 36:return "EXEC";
break;
case 37:return "TRUNCATE";
break;
case 38:return "CONTINUE";
break;
case 39:return "BREAK";
break;
case 40:return "RETURN";
break;
case 41:return 11;
break;
case 42:return 12;
break;
case 43:return 13;
break;
case 44:return 16;
break;
case 45:return 15;
break;
case 46:return 14;
break;
case 47:return 19;
break;
case 48:return 25;
break;
case 49:return 24;
break;
case 50:return 26;
break;
case 51:return 23;
break;
case 52:return 20;
break;
case 53:return 22;
break;
case 54:return 21;
break;
case 55:return "ADD";
break;
case 56:return "NEW";
break;
case 57:return "LISTA";
break;
case 58:return 50;
break;
case 59:return 73;
break;
case 60:return 103;
break;
case 61:return 27;
break;
case 62:return 28;
break;
case 63:return 76;
break;
case 64:return 77;
break;
case 65:return 78;
break;
case 66:return 80;
break;
case 67:return "PUNTO";
break;
case 68:return 31;
break;
case 69:return 32;
break;
case 70:return 72;
break;
case 71:return 66;
break;
case 72:return 7;
break;
case 73:return 8;
break;
case 74:return 9;
break;
case 75:return 35;
break;
case 76:return 30;
break;
case 77:return 29;
break;
case 78:return 5;
break;
case 79: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:"[^\n\r"\""|"\\\\""\""]*")/i,/^(?:'[^\n\r]?')/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\\\')/i,/^(?:\\')/i,/^(?:")/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:truncate\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:add\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-z]([a-z]|[0-9])*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
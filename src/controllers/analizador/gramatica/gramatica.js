/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,27],$V2=[1,31],$V3=[1,30],$V4=[1,28],$V5=[1,29],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,18],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[5,34,69,70,71,81,82,83,86,87,90,93,98,103,104,105],$Vg=[1,35],$Vh=[1,41],$Vi=[1,42],$Vj=[1,40],$Vk=[15,34,76],$Vl=[5,9,19,26,28,29,30,31,32,33,34,49,51,62,69,70,71,80,81,82,83,86,87,90,93,96,97,98,103,104,105],$Vm=[1,61],$Vn=[1,60],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,78],$Vw=[1,92],$Vx=[1,97],$Vy=[1,98],$Vz=[1,108],$VA=[27,80],$VB=[1,125],$VC=[1,126],$VD=[1,127],$VE=[1,128],$VF=[1,129],$VG=[1,130],$VH=[1,131],$VI=[1,132],$VJ=[7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,50,72,73,78,80,101],$VK=[1,140],$VL=[1,141],$VM=[7,8,27,50,72,78],$VN=[1,149],$VO=[1,150],$VP=[1,152],$VQ=[1,153],$VR=[7,8,11,12,13,14,15,16,27,50,72,78],$VS=[9,19,26,28,29,30,31,32,33,34],$VT=[34,49,51,62,69,70,71,80,81,82,83,86,87,90,93,96,97,98,104,105],$VU=[5,34,49,51,62,69,70,71,80,81,82,83,86,87,90,93,96,97,98,103,104,105],$VV=[7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,50,66,72,73,78,80,101],$VW=[7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,27,50,72,73,78,80,101],$VX=[7,8,11,12,13,14,15,16,19,22,24,25,27,50,72,73,78,80,101],$VY=[7,8,13,16,27,50,72,78],$VZ=[1,281],$V_=[1,284],$V$=[1,285],$V01=[80,96,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones_globales":4,"EOF":5,"condicion_logica":6,"AND":7,"OR":8,"NOT":9,"relacional":10,"MAYOR_I":11,"MENOR_I":12,"IGUAL":13,"MENOR":14,"MAYOR":15,"DIFERENTE":16,"expresion":17,"POTENCIA":18,"MENOS":19,"POR":20,"DIV":21,"MAS":22,"MOD":23,"INCREMENTO":24,"DECREMENTO":25,"PARENTESIS_A":26,"PARENTESIS_C":27,"ENTERO":28,"DECIMAL":29,"TRUE":30,"FALSE":31,"CADENA":32,"CARACTER":33,"ID":34,"acceso_vector":35,"acceso_lista":36,"metodos_nativos":37,"LENGTH":38,"TRUNCATE":39,"numero":40,"TYPEOF":41,"TO_STRING":42,"TO_CHAR_ARRAY":43,"ROUND":44,"instruccion_global":45,"instrucciones_locales":46,"instruccion_local":47,"instruccion_local_metodo":48,"CONTINUE":49,"PUNTOCOMA":50,"BREAK":51,"instrucciones_locales_metodo":52,"creacion_variable":53,"asignacion_variable":54,"manejo_vector_lista":55,"ciclo_for":56,"ciclo_do_while":57,"ciclo_while":58,"condicion_if":59,"condicion_switch":60,"llamada_metodo_funcion":61,"RETURN":62,"declaracion_funcion_metodo":63,"asignacion_tipo":64,"asignacion_valor_variable":65,"ASIGNACION":66,"TO_UPPER":67,"TO_LOWER":68,"INT":69,"CHAR":70,"DOUBLE":71,"TERNARIO":72,"DOSPUNTOS":73,"asignacion_valor_vector":74,"NEW":75,"CORCHETE_A":76,"CORCHETE_C":77,"LLAVE_A":78,"elementos_coma":79,"LLAVE_C":80,"BOOLEAN":81,"STRING":82,"FOR":83,"ciclo_for_variable":84,"ciclo_for_incremento":85,"DO":86,"WHILE":87,"ciclo_while_condicion":88,"condiciones_logicas":89,"IF":90,"condicion_if_else":91,"ELSE":92,"SWITCH":93,"condiciones_case_switch":94,"condicion_case":95,"CASE":96,"DEFAULT":97,"LISTA":98,"PUNTO":99,"ADD":100,"COMA":101,"definicion_parametros":102,"VOID":103,"PRINT":104,"EXEC":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"AND",8:"OR",9:"NOT",11:"MAYOR_I",12:"MENOR_I",13:"IGUAL",14:"MENOR",15:"MAYOR",16:"DIFERENTE",18:"POTENCIA",19:"MENOS",20:"POR",21:"DIV",22:"MAS",23:"MOD",24:"INCREMENTO",25:"DECREMENTO",26:"PARENTESIS_A",27:"PARENTESIS_C",28:"ENTERO",29:"DECIMAL",30:"TRUE",31:"FALSE",32:"CADENA",33:"CARACTER",34:"ID",38:"LENGTH",39:"TRUNCATE",40:"numero",41:"TYPEOF",42:"TO_STRING",43:"TO_CHAR_ARRAY",44:"ROUND",49:"CONTINUE",50:"PUNTOCOMA",51:"BREAK",62:"RETURN",66:"ASIGNACION",67:"TO_UPPER",68:"TO_LOWER",69:"INT",70:"CHAR",71:"DOUBLE",72:"TERNARIO",73:"DOSPUNTOS",75:"NEW",76:"CORCHETE_A",77:"CORCHETE_C",78:"LLAVE_A",80:"LLAVE_C",81:"BOOLEAN",82:"STRING",83:"FOR",86:"DO",87:"WHILE",89:"condiciones_logicas",90:"IF",92:"ELSE",93:"SWITCH",96:"CASE",97:"DEFAULT",98:"LISTA",99:"PUNTO",100:"ADD",101:"COMA",103:"VOID",104:"PRINT",105:"EXEC"},
productions_: [0,[3,2],[6,3],[6,3],[6,2],[6,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,3],[17,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[4,2],[4,1],[46,2],[46,1],[47,1],[47,2],[47,2],[52,2],[52,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,3],[48,2],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[53,2],[54,2],[54,2],[54,2],[65,1],[65,3],[65,6],[65,6],[65,6],[65,6],[65,6],[65,6],[65,6],[65,3],[65,7],[74,7],[74,5],[64,1],[64,1],[64,1],[64,1],[64,1],[56,9],[56,10],[84,1],[84,1],[85,3],[85,2],[85,2],[57,8],[57,9],[88,2],[88,2],[88,2],[58,5],[58,6],[59,6],[59,5],[59,7],[59,6],[91,4],[91,3],[91,2],[60,7],[94,2],[94,1],[95,3],[95,4],[95,2],[95,3],[55,11],[55,9],[55,12],[55,7],[79,3],[79,1],[35,4],[36,6],[63,7],[63,8],[63,6],[63,7],[63,7],[63,8],[63,6],[63,7],[102,4],[102,2],[61,5],[61,4],[61,5],[61,5],[61,6],[61,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log(this.$)
break;
case 2: case 3: case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 66: case 83: case 91: case 104: case 119: case 124: case 127: case 132:
this.$ = $$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 4: case 19: case 20: case 22: case 23: case 50: case 53: case 54: case 55: case 67: case 78: case 79: case 80: case 81: case 105: case 106: case 109: case 110: case 111: case 120: case 122: case 126: case 145:
this.$ = $$[$0-1]+' '+$$[$0]
break;
case 5: case 12: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 133:
this.$ = $$[$0]+' '
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 118: case 125: case 134: case 144: case 147:
this.$ = $$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 48:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 49:
this.$ = [$$[$0]+'']
break;
case 51: case 52: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 82: case 95: case 96: case 97: case 98: case 99: case 102: case 103: case 123:
this.$ = $$[$0]+''
break;
case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 113: case 114: case 117: case 135: case 138: case 142:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 92: case 93: case 116: case 121: case 131: case 136: case 139: case 140: case 143:
this.$ = $$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 94: case 112: case 115: case 146: case 148: case 149: case 151:
this.$ = $$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 100: case 129:
this.$ = $$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 101:
this.$ = $$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 107:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+''+$$[$0-1]
break;
case 108:
this.$ = $$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+''+$$[$0-2]+''+$$[$0-1]
break;
case 128:
this.$ = $$[$0-10]+' '+$$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 130:
this.$ = $$[$0-11]+' '+$$[$0-10]+' '+$$[$0-9]+' '+$$[$0-8]+' '+$$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 137: case 141:
this.$ = $$[$0-7]+' '+$$[$0-6]+' '+$$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 150:
this.$ = $$[$0-5]+' '+$$[$0-4]+' '+$$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+''+$$[$0]
break;
}
},
table: [{3:1,4:2,34:$V0,35:17,36:16,45:3,53:4,54:5,55:6,56:7,57:8,58:9,59:10,60:11,61:13,63:12,64:14,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,103:$Vc,104:$Vd,105:$Ve},{1:[3]},{5:[1,32],34:$V0,35:17,36:16,45:33,53:4,54:5,55:6,56:7,57:8,58:9,59:10,60:11,61:13,63:12,64:14,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,103:$Vc,104:$Vd,105:$Ve},o($Vf,[2,49]),o($Vf,[2,68]),o($Vf,[2,69]),o($Vf,[2,70]),o($Vf,[2,71]),o($Vf,[2,72]),o($Vf,[2,73]),o($Vf,[2,74]),o($Vf,[2,75]),o($Vf,[2,76]),o($Vf,[2,77]),{34:[1,36],35:17,36:16,54:34,76:$Vg},{26:[1,39],50:$Vh,65:37,66:$Vi,76:$Vj,99:[1,38]},{50:$Vh,65:43,66:$Vi},{50:$Vh,65:44,66:$Vi},{14:[1,45]},{26:[1,46]},{78:[1,47]},{26:[1,48]},{26:[1,49]},{26:[1,50]},{34:[1,51]},{26:[1,52]},{34:[1,53]},o($Vk,[2,95]),o($Vk,[2,96]),o($Vk,[2,97]),o($Vk,[2,98]),o($Vk,[2,99]),{1:[2,1]},o($Vf,[2,48]),o($Vl,[2,78]),{77:[1,54]},{26:[1,55],50:$Vh,65:37,66:$Vi,76:$Vj},o($Vl,[2,79]),{100:[1,56]},{17:59,19:$Vm,26:$Vn,27:[1,58],28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,79:57},{28:[1,72],76:[1,71]},o($Vl,[2,82]),{6:73,9:$Vv,10:79,17:86,19:$Vm,26:[1,76],28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,37:77,38:[1,80],39:[1,81],41:[1,82],42:[1,83],43:[1,84],44:[1,85],67:[1,74],68:[1,75]},o($Vl,[2,80]),o($Vl,[2,81]),{64:87,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5},{34:$Vw,35:17,36:16,53:89,54:90,64:91,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,84:88},{34:$V0,35:17,36:16,46:94,47:95,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,93],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{6:110,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{6:111,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{34:[1,112]},{26:[1,113]},{32:[1,114],34:[1,115]},{26:[1,116]},{34:[1,117]},{27:[1,119],64:120,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,102:118},{26:[1,121]},{27:[1,122]},{50:[1,123]},o($VA,[2,133],{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,101:[1,124]}),{6:133,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{28:[1,134],29:[1,135]},o($VJ,[2,24]),o($VJ,[2,25]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,29]),o($VJ,[2,30],{76:$Vj}),o($VJ,[2,31]),o($VJ,[2,32]),{28:[1,136]},{77:[1,137]},{7:$VK,8:$VL,50:[1,138],72:[1,139]},{26:[1,142]},{26:[1,143]},{6:133,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,69:[1,144],70:[1,145],71:[1,146]},{50:[1,147]},{6:148,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},o($VM,[2,5],{11:$VN,12:$VO,13:[1,151],14:$VP,15:$VQ,16:[1,154]}),{26:[1,155]},{26:[1,156]},{26:[1,157]},{26:[1,158]},{26:[1,159]},{26:[1,160]},o($VR,[2,12],{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI}),{15:[1,161]},{6:162,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},o($VS,[2,102]),o($VS,[2,103]),{34:$Vw,35:17,36:16,54:34},{50:$Vh,65:37,66:$Vi,76:$Vj},{87:[1,163]},{34:$V0,35:17,36:16,47:165,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,164],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VT,[2,51]),o($VT,[2,52]),{50:[1,166]},{50:[1,167]},o($VT,[2,57]),o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,65]),{6:168,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,50:[1,169]},{34:$Vw,35:17,36:16,54:34,76:$Vg},{7:$VK,8:$VL,78:[1,170]},{7:$VK,8:$VL,78:[1,171]},{27:[1,172]},{27:[1,174],64:120,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,102:173},{27:[1,175]},{27:[1,176]},{17:59,19:$Vm,26:$Vn,27:[1,178],28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,79:177},{66:[1,179]},{27:[1,180]},{78:[1,181]},{34:[1,182]},{17:183,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{50:[1,184]},o($VU,[2,147]),{17:59,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,79:185},{17:186,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:187,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:188,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:189,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:190,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:191,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},o($VJ,[2,19]),o($VJ,[2,20]),{7:$VK,8:$VL,27:[1,192]},o($VJ,[2,22]),o($VJ,[2,23]),{77:[1,193]},o($VV,[2,134]),o($Vl,[2,83]),{17:194,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{6:195,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{6:196,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{32:[1,197],34:[1,198]},{32:[1,199],34:[1,200]},{27:[1,201]},{27:[1,202]},{27:[1,203]},o($Vl,[2,91]),o($VM,[2,4]),{10:204,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{10:205,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{10:206,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{10:207,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{10:208,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{10:209,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{32:[1,210],34:[1,213],35:212,36:211},{34:[1,215],40:[1,214]},{17:216,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{30:[1,219],31:[1,220],34:[1,217],40:[1,218]},{32:[1,221],34:[1,222]},{29:[1,223],34:[1,224]},{34:[1,225]},{7:$VK,8:$VL,50:[1,226]},{26:[1,227]},{87:[1,228]},o($VT,[2,50]),o($VT,[2,53]),o($VT,[2,54]),{7:$VK,8:$VL,50:[1,229]},o($VT,[2,67]),{34:$V0,35:17,36:16,46:231,47:95,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,230],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{34:$V0,35:17,36:16,46:232,47:95,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,233],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{78:[1,234]},{27:[1,235]},{78:[1,236]},{50:[1,237]},{50:[1,238]},{27:[1,239]},{50:[1,240]},{75:[1,241],78:[1,242]},{78:[1,243]},{34:$V0,35:17,36:16,48:246,52:245,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,244],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{27:[2,145],101:[1,247]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,27:[1,248]},o($VU,[2,146]),o($VA,[2,132]),o($VW,[2,13]),o($VX,[2,14],{18:$VB,20:$VD,21:$VE,23:$VG}),o($VW,[2,15],{18:$VB}),o($VW,[2,16],{18:$VB}),o($VX,[2,17],{18:$VB,20:$VD,21:$VE,23:$VG}),o($VW,[2,18],{18:$VB}),o($VJ,[2,21]),{77:[1,249]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,73:[1,250]},o($VM,[2,2]),o([8,27,50,72,78],[2,3],{7:$VK}),{27:[1,251]},{27:[1,252]},{27:[1,253]},{27:[1,254]},{17:255,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:256,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{17:257,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},o($VR,[2,6]),o($VR,[2,7]),o($VY,[2,8],{11:$VN,12:$VO,14:$VP,15:$VQ}),o($VR,[2,9]),o($VR,[2,10]),o($VY,[2,11],{11:$VN,12:$VO,14:$VP,15:$VQ}),{27:[1,258]},{27:[1,259]},{27:[1,260]},{27:[1,261],76:$Vj},{27:[1,262]},{27:[1,263]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,27:[1,264]},{27:[1,265]},{27:[1,266]},{27:[1,267]},{27:[1,268]},{27:[1,269]},{27:[1,270]},{27:[1,271]},{27:[1,272]},{66:[1,273]},{34:[1,275],85:274},{6:276,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{26:[1,277]},o($VT,[2,66]),o($VU,[2,112]),{34:$V0,35:17,36:16,47:165,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,278],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{34:$V0,35:17,36:16,47:165,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,279],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VU,[2,115],{91:280,92:$VZ}),{94:282,95:283,96:$V_,97:$V$},{78:[1,286]},{34:$V0,35:17,36:16,48:246,52:288,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,287],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VU,[2,148]),o($VU,[2,149]),{50:[1,289]},o($VU,[2,151]),{64:290,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5},{17:59,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70,79:291},{34:$V0,35:17,36:16,48:246,52:293,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,292],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($Vf,[2,138]),{80:[1,294]},{34:$V0,35:17,36:16,48:246,52:295,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[2,56],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{64:120,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,102:296},{50:[1,297]},o($VV,[2,135]),{17:298,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{50:[1,299]},{50:[1,300]},{50:[1,301]},{50:[1,302]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,50:[1,303]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,50:[1,304]},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,50:[1,305]},{50:[2,33]},{50:[2,34]},{50:[2,35]},{50:[2,36]},{50:[2,37]},{50:[2,38]},{50:[2,39]},{50:[2,40]},{50:[2,41]},{50:[2,42]},{50:[2,43]},{50:[2,44]},{50:[2,45]},{50:[2,46]},{50:[2,47]},{75:[1,306]},{27:[1,307]},{24:[1,310],25:[1,309],66:[1,308]},{7:$VK,8:$VL,27:[1,311]},{6:312,9:$Vv,10:79,17:86,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},o($VU,[2,113]),o($VU,[2,114],{91:313,92:$VZ}),o($VU,[2,117]),{59:315,78:[1,314],90:$V9},{80:[1,316]},{80:[2,123],94:317,95:283,96:$V_,97:$V$},{28:[1,318]},{73:[1,319]},{34:$V0,35:17,36:16,48:246,52:321,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,320],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($Vf,[2,142]),{80:[1,322]},o($VU,[2,150]),{76:[1,323]},{80:[1,324]},o($Vf,[2,136]),{80:[1,325]},o($Vf,[2,139]),{80:[2,55]},{27:[2,144]},o($VU,[2,131]),{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,50:[1,326]},o($Vl,[2,84]),o($Vl,[2,85]),o($Vl,[2,86]),o($Vl,[2,87]),o($Vl,[2,88]),o($Vl,[2,89]),o($Vl,[2,90]),{98:[1,327]},{78:[1,328]},{17:329,19:$Vm,26:$Vn,28:$Vo,29:$Vp,30:$Vq,31:$Vr,32:$Vs,33:$Vt,34:$Vu,35:69,36:70},{27:[2,105]},{27:[2,106]},{50:[1,330]},{7:$VK,8:$VL,27:[1,331]},o($VU,[2,116]),{34:$V0,35:17,36:16,46:332,47:95,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,333],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VU,[2,120]),o($VU,[2,121]),{80:[2,122]},{73:[1,334]},o($V01,[2,126],{36:16,35:17,47:95,48:96,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,64:109,46:335,34:$V0,49:$Vx,51:$Vy,62:$Vz,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve}),o($Vf,[2,140]),{80:[1,336]},o($Vf,[2,143]),{28:[1,337]},{50:[1,338]},o($Vf,[2,137]),o($Vl,[2,92]),{14:[1,339]},{34:$V0,35:17,36:16,46:341,47:95,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,340],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},{18:$VB,19:$VC,20:$VD,21:$VE,22:$VF,23:$VG,24:$VH,25:$VI,27:[2,104]},o($VU,[2,107]),{50:[1,342]},{34:$V0,35:17,36:16,47:165,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,343],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VU,[2,119]),o($V01,[2,124],{36:16,35:17,47:95,48:96,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,64:109,46:344,34:$V0,49:$Vx,51:$Vy,62:$Vz,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve}),o($V01,[2,127],{36:16,35:17,48:96,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,64:109,47:165,34:$V0,49:$Vx,51:$Vy,62:$Vz,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve}),o($Vf,[2,141]),{77:[1,345]},o($VU,[2,129]),{64:346,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5},o($VU,[2,100]),{34:$V0,35:17,36:16,47:165,48:96,49:$Vx,51:$Vy,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,62:$Vz,64:109,69:$V1,70:$V2,71:$V3,80:[1,347],81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve},o($VU,[2,108]),o($VU,[2,118]),o($V01,[2,125],{36:16,35:17,48:96,53:99,54:100,55:101,56:102,57:103,58:104,59:105,60:106,61:107,64:109,47:165,34:$V0,49:$Vx,51:$Vy,62:$Vz,69:$V1,70:$V2,71:$V3,81:$V4,82:$V5,83:$V6,86:$V7,87:$V8,90:$V9,93:$Va,98:$Vb,104:$Vd,105:$Ve}),{50:[1,348]},{15:[1,349]},o($VU,[2,101]),o($VU,[2,128]),{50:[1,350]},o($VU,[2,130])],
defaultActions: {32:[2,1],258:[2,33],259:[2,34],260:[2,35],261:[2,36],262:[2,37],263:[2,38],264:[2,39],265:[2,40],266:[2,41],267:[2,42],268:[2,43],269:[2,44],270:[2,45],271:[2,46],272:[2,47],295:[2,55],296:[2,144],309:[2,105],310:[2,106],317:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/*Ignorar comentario multilínea*/
break;
case 2:/*Retornos de carro y nuevas líneas*/
break;
case 3:/*Saltos de línea*/
break;
case 4:/*Espacios en blanco*/
break;
case 5:return "IF";
break;
case 6:return "ELSE";
break;
case 7:return "FOR";
break;
case 8:return "WHILE";
break;
case 9:return "DO";
break;
case 10:return "SWITCH";
break;
case 11:return "CASE";
break;
case 12:return "DEFAULT";
break;
case 13:return "INT";
break;
case 14:return "DOUBLE";
break;
case 15:return "BOOLEAN";
break;
case 16:return "CHAR";
break;
case 17:return "STRING";
break;
case 18:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CADENA";
break;
case 19:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CARACTER";
break;
case 20:return "SALTO_LINEA_T";
break;
case 21:return "DOBLE_BARRA_T";
break;
case 22:return "COMILLAS_T";
break;
case 23:return "TABULADOR_T";
break;
case 24:return "COMILLA_T"
break;
case 25:return "COMILLA";
break;
case 26:return "COMILLAS";
break;
case 27:return "VOID";
break;
case 28:return "PRINT";
break;
case 29:return "TO_LOWER";
break;
case 30:return "TO_UPPER";
break;
case 31:return "LENGTH";
break;
case 32:return "ROUND";
break;
case 33:return "TYPEOF";
break;
case 34:return "TO_STRING";
break;
case 35:return "TO_CHAR_ARRAY";
break;
case 36:return "EXEC";
break;
case 37:return "TRUNCATE";
break;
case 38:return "CONTINUE";
break;
case 39:return "BREAK";
break;
case 40:return "RETURN";
break;
case 41:return 11;
break;
case 42:return 12;
break;
case 43:return 13;
break;
case 44:return 16;
break;
case 45:return 15;
break;
case 46:return 14;
break;
case 47:return 18;
break;
case 48:return 24;
break;
case 49:return 22;
break;
case 50:return 25;
break;
case 51:return 19;
break;
case 52:return 20;
break;
case 53:return 21;
break;
case 54:return 23;
break;
case 55:return "ADD";
break;
case 56:return "NEW";
break;
case 57:return "LISTA";
break;
case 58:return 50;
break;
case 59:return 73;
break;
case 60:return 101;
break;
case 61:return 26;
break;
case 62:return 27;
break;
case 63:return 76;
break;
case 64:return 77;
break;
case 65:return 78;
break;
case 66:return 80;
break;
case 67:return "PUNTO";
break;
case 68:return 30;
break;
case 69:return 31;
break;
case 70:return 72;
break;
case 71:return 66;
break;
case 72:return 7;
break;
case 73:return 8;
break;
case 74:return 9;
break;
case 75:return 34;
break;
case 76:return 29;
break;
case 77:return 28;
break;
case 78:return 5;
break;
case 79: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:"[^\n\r]*")/i,/^(?:'[^\n\r]?')/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\\\')/i,/^(?:\\')/i,/^(?:")/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:truncate\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:add\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-z]([a-z]|[0-9])*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
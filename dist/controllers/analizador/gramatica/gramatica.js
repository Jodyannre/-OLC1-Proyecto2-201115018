/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,18],$V2=[1,14],$V3=[1,27],$V4=[1,31],$V5=[1,30],$V6=[1,28],$V7=[1,29],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,19],$Ve=[1,32],$Vf=[1,25],$Vg=[1,26],$Vh=[2,5,35,66,71,72,73,76,77,78,83,84,85,90,99,104,106,107],$Vi=[1,39],$Vj=[2,5,9,23,27,29,30,31,32,33,34,35,40,41,42,43,44,45,46,47,52,54,65,66,71,72,73,76,77,78,82,83,84,85,90,93,94,99,104,106,107],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[15,35,95],$Vo=[1,63],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,118],$VH=[1,104],$VI=[1,105],$VJ=[1,116],$VK=[1,117],$VL=[1,131],$VM=[1,135],$VN=[1,136],$VO=[7,8,28,53,74,75,82,96,102],$VP=[1,138],$VQ=[1,139],$VR=[1,141],$VS=[1,142],$VT=[7,8,11,12,13,14,15,16,28,53,74,75,82,96,102],$VU=[1,144],$VV=[1,145],$VW=[1,146],$VX=[1,147],$VY=[1,148],$VZ=[1,149],$V_=[1,150],$V$=[1,151],$V01=[7,8,11,12,13,14,15,16,19,20,21,22,23,24,25,26,28,53,74,75,82,96,102],$V11=[2,5,35,52,54,65,66,71,72,73,76,77,78,82,83,84,85,90,93,94,99,104,106,107],$V21=[1,164],$V31=[28,82,102],$V41=[9,23,27,29,30,31,32,33,34,35,40,41,42,43,44,45,46,47,106,107],$V51=[2,35,52,54,65,66,71,72,73,76,77,78,82,83,84,85,90,93,94,99,104,106,107],$V61=[1,192],$V71=[28,102],$V81=[7,8,13,16,28,53,74,75,82,96,102],$V91=[7,8,11,12,13,14,15,16,20,21,22,23,24,25,26,28,53,74,75,82,96,102],$Va1=[7,8,11,12,13,14,15,16,23,24,25,26,28,53,74,75,82,96,102],$Vb1=[1,278],$Vc1=[1,279],$Vd1=[2,35,65,66,71,72,73,76,77,78,82,83,84,85,90,99,104,106,107],$Ve1=[1,311],$Vf1=[82,93,94],$Vg1=[2,5,35,52,54,65,66,71,72,73,76,77,78,82,83,84,85,89,90,93,94,99,104,106,107];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones_globales":4,"EOF":5,"condicion_logica":6,"AND":7,"OR":8,"NOT":9,"relacional":10,"MAYOR_I":11,"MENOR_I":12,"IGUAL":13,"MENOR":14,"MAYOR":15,"DIFERENTE":16,"expresion":17,"instruccionTemp":18,"POTENCIA":19,"POR":20,"MOD":21,"DIV":22,"MENOS":23,"MAS":24,"INCREMENTO":25,"DECREMENTO":26,"PARENTESIS_A":27,"PARENTESIS_C":28,"ENTERO":29,"DECIMAL":30,"TRUE":31,"FALSE":32,"CADENA":33,"CARACTER":34,"ID":35,"acceso_vector":36,"acceso_lista":37,"llamada_metodo_funcion":38,"metodos_nativos":39,"LENGTH":40,"TRUNCATE":41,"TYPEOF":42,"TO_STRING":43,"TO_CHAR_ARRAY":44,"ROUND":45,"TO_UPPER":46,"TO_LOWER":47,"instruccion_global":48,"instrucciones_locales":49,"instruccion_local":50,"instruccion_local_metodo":51,"CONTINUE":52,"PUNTOCOMA":53,"BREAK":54,"instrucciones_locales_metodo":55,"creacion_variable":56,"asignacion_variable":57,"manejo_vector_lista":58,"ciclo_for":59,"ciclo_do_while":60,"ciclo_while":61,"condicion_if":62,"condicion_switch":63,"aritmetico_unario":64,"RETURN":65,"EXCEPCION":66,"asignacion_tipo":67,"declaracion_funcion_metodo":68,"asignacion_valor_variable":69,"ASIGNACION":70,"INT":71,"CHAR":72,"DOUBLE":73,"TERNARIO":74,"DOSPUNTOS":75,"BOOLEAN":76,"STRING":77,"FOR":78,"ciclo_for_variable":79,"ciclo_for_incremento":80,"LLAVE_A":81,"LLAVE_C":82,"DO":83,"WHILE":84,"IF":85,"condicion_else":86,"condiciones_if_else":87,"condicion_if_else":88,"ELSE":89,"SWITCH":90,"condiciones_case_switch":91,"condicion_case":92,"CASE":93,"DEFAULT":94,"CORCHETE_A":95,"CORCHETE_C":96,"NEW":97,"elementos_coma":98,"LISTA":99,"PUNTO":100,"ADD":101,"COMA":102,"definicion_parametros":103,"VOID":104,"parametro":105,"PRINT":106,"EXEC":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"AND",8:"OR",9:"NOT",11:"MAYOR_I",12:"MENOR_I",13:"IGUAL",14:"MENOR",15:"MAYOR",16:"DIFERENTE",19:"POTENCIA",20:"POR",21:"MOD",22:"DIV",23:"MENOS",24:"MAS",25:"INCREMENTO",26:"DECREMENTO",27:"PARENTESIS_A",28:"PARENTESIS_C",29:"ENTERO",30:"DECIMAL",31:"TRUE",32:"FALSE",33:"CADENA",34:"CARACTER",35:"ID",40:"LENGTH",41:"TRUNCATE",42:"TYPEOF",43:"TO_STRING",44:"TO_CHAR_ARRAY",45:"ROUND",46:"TO_UPPER",47:"TO_LOWER",52:"CONTINUE",53:"PUNTOCOMA",54:"BREAK",65:"RETURN",66:"EXCEPCION",70:"ASIGNACION",71:"INT",72:"CHAR",73:"DOUBLE",74:"TERNARIO",75:"DOSPUNTOS",76:"BOOLEAN",77:"STRING",78:"FOR",81:"LLAVE_A",82:"LLAVE_C",83:"DO",84:"WHILE",85:"IF",89:"ELSE",90:"SWITCH",93:"CASE",94:"DEFAULT",95:"CORCHETE_A",96:"CORCHETE_C",97:"NEW",99:"LISTA",100:"PUNTO",101:"ADD",102:"COMA",104:"VOID",106:"PRINT",107:"EXEC"},
productions_: [0,[3,2],[6,3],[6,3],[6,2],[6,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[18,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[4,2],[4,1],[49,2],[49,1],[50,1],[50,2],[50,2],[55,2],[55,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,2],[51,3],[51,2],[51,1],[51,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,2],[48,1],[48,2],[56,2],[56,1],[57,2],[69,1],[69,3],[69,6],[69,6],[69,6],[69,7],[67,1],[67,1],[67,1],[67,1],[67,1],[59,9],[59,10],[79,1],[79,1],[80,2],[80,2],[80,3],[64,3],[64,3],[60,8],[60,9],[61,7],[62,7],[62,6],[62,8],[62,7],[62,9],[62,8],[62,8],[62,7],[87,2],[87,1],[86,4],[86,3],[88,8],[88,7],[63,7],[91,2],[91,1],[92,3],[92,4],[92,2],[92,3],[58,11],[58,9],[58,12],[58,8],[58,7],[58,9],[58,7],[98,3],[98,1],[36,4],[37,6],[68,7],[68,8],[68,6],[68,7],[68,7],[68,8],[68,6],[68,7],[103,3],[103,1],[105,2],[105,4],[105,5],[38,4],[38,3],[38,4],[38,5],[38,4],[38,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$ = new Logica.default($$[$0-2],new Tipo.default(Tipo.tipos.AND),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0]); 
break;
case 3:
this.$ = new Logica.default($$[$0-2],new Tipo.default(Tipo.tipos.OR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0]); 
break;
case 4:
this.$ = new Logica.default($$[$0],new Tipo.default(Tipo.tipos.NOT),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 5: case 12: case 13: case 31: case 32: case 33: case 34: case 47: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
this.$ = $$[$0]
break;
case 6:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MAYOR_I),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 7:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MENOR_I),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 8:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.IGUAL),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 9:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MENOR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 10:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.MAYOR),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 11:
this.$ = new Relacional.default($$[$0-2],$$[$0],new Tipo.default(Tipo.tipos.DIFERENTE),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 14:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.POTENCIA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 15:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.MULTIPLICACION),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 16:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.MODULO),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 17:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.DIVISION),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 18:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.RESTA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 19:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.SUMA),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 20:
this.$ = new Aritmetica.default($$[$0],new Tipo.default(Tipo.tipos.NEGACION),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 21:
this.$ = new Aritmetica.default($$[$0-1],new Tipo.default(Tipo.tipos.INCREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22:
this.$ = new Aritmetica.default($$[$0-1],new Tipo.default(Tipo.tipos.DECREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 23:
this.$ = new Agrupacion.default(new Tipo.default(Tipo.tipos.AGRUPACION),_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1]); 
break;
case 24:
this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0],10), _$[$0].first_line, _$[$0].first_column); 
break;
case 25:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.DECIMAL),parseFloat($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 26:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.BOOLEANO),true, _$[$0].first_line, _$[$0].first_column); 
break;
case 27:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.BOOLEANO),false, _$[$0].first_line, _$[$0].first_column); 
break;
case 28:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 29:
 this.$ = new Primitivo.default( new Tipo.default(Tipo.tipos.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 30:
this.$ = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 35:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearLength($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;
	
break;
case 36:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearTruncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 37:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearTypeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;			
	
break;
case 38:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;			
	
break;
case 39:

		var tipo = new Tipo.default(Tipo.tipos.LISTA); 
		var nodo = crearToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 40:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = crearRound($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;		
	
break;
case 41:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;
	
break;
case 42:

		var tipo = new Tipo.default(Tipo.tipos.CADENA); 
		var nodo = crearToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column, tipo);
		this.$ = nodo;
	
break;
case 43:

		$$[$0-1].push($$[$0]); 
		this.$ = $$[$0-1]
	
break;
case 44: case 46: case 51:
this.$ = [$$[$0]]
break;
case 45: case 50:

		//$$[$0-1] = [$$[$0-1]];
		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	
break;
case 48:

		var nTipo = new Tipo.default(Tipo.tipos.CONTINUE);
		var nContinue = new CONTINUE.default(nTipo,_$[$0-1].first_line, _$[$0-1].first_column);
		this.$ = nContinue;
	
break;
case 49:

		var nTipo = new Tipo.default(Tipo.tipos.BREAK);
		var nBreak = new BREAK.default(nTipo,_$[$0-1].first_line, _$[$0-1].first_column);
		this.$ = nBreak;
	
break;
case 61: case 75:
this.$ = $$[$0-1]
break;
case 62:

		var nTipo = new Tipo.default(Tipo.tipos.RETURN);
		var nReturn = new RETURN.default(nTipo,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1]);
		this.$ = nReturn;			
	
break;
case 63:

		var nTipo = new Tipo.default(Tipo.tipos.RETURN);
		var nReturn = new RETURN.default(nTipo,_$[$0-1].first_line, _$[$0-1].first_column,null);
		this.$ = nReturn;		
	
break;
case 64: case 76:

		this.$ = new Excepcion.default("Error léxico", "El elemento no pertenece al lenguaje.", _$[$0].first_line, _$[$0].first_column);
	
break;
case 65: case 77:

		this.$ = new Excepcion.default("Error Sintáctico", "El elemento no cumple con las reglas sintácticas.", _$[$0-1].first_line, _$[$0-1].first_column);
	
break;
case 78:

											var id = $$[$0].getId();
											//var idNodo = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),id,_$[$0-1].first_line, _$[$0-1].first_column);
											this.$ = new Declaracion.default(id,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column,$$[$0],null);
											
break;
case 79:

		var id = $$[$0].getId_Obj();
		var nTipo = new Tipo.default($$[$0].getTipoRetorno());
		//var idNodo = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),id,_$[$0].first_line, _$[$0].first_column);
		this.$ = new Declaracion.default(id,nTipo,_$[$0].first_line, _$[$0].first_column,$$[$0],null);
	
break;
case 80:
 
		var id = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
		var asignacion = crearAsignacion(id,_$[$0-1].first_line, _$[$0-1].first_column,$$[$0]);
		this.$ = asignacion;
	
break;
case 81:
this.$ = null;
break;
case 82:
this.$ = $$[$0-1];
break;
case 83:

		var tipo = new Tipo.default(Tipo.tipos.ENTERO); 
		var nodo = new Casteo.default(tipo,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
		this.$ = nodo;		
	
break;
case 84:

		var tipo = new Tipo.default(Tipo.tipos.CARACTER); 
		var nodo = new Casteo.default(tipo,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);;
		this.$ = nodo;
	
break;
case 85:

		var tipo = new Tipo.default(Tipo.tipos.DECIMAL); 
		var nodo = new Casteo.default(tipo,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
		this.$ = nodo;
	
break;
case 86:

		this.$ = new Ternario.default(new Tipo.default(Tipo.tipos.TERNARIO),$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
	
break;
case 87:
this.$ = new Tipo.default(Tipo.tipos.ENTERO); 
break;
case 88:
this.$ = new Tipo.default(Tipo.tipos.BOOLEANO); 
break;
case 89:
this.$ = new Tipo.default(Tipo.tipos.CADENA); 
break;
case 90:
this.$ = new Tipo.default(Tipo.tipos.DECIMAL); 
break;
case 91:
this.$ = new Tipo.default(Tipo.tipos.CARACTER); 
break;
case 92:

		var nTipo = new Tipo.default(Tipo.tipos.FOR);
		var nFor = new FOR.default(nTipo,_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-5],$$[$0-3],null);
		this.$ = nFor;
	
break;
case 93:

		var nTipo = new Tipo.default(Tipo.tipos.FOR);
		var nFor = new FOR.default(nTipo,_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
		this.$ = nFor;
	
break;
case 94: case 95: case 98:
this.$ = $$[$0];
break;
case 96:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
		this.$ = new Aritmetica.default(id,new Tipo.default(Tipo.tipos.DECREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
	
break;
case 97:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
		this.$ = new Aritmetica.default(id,new Tipo.default(Tipo.tipos.INCREMENTO),_$[$0-1].first_line, _$[$0-1].first_column); 
	
break;
case 99:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
		this.$ = new Aritmetica.default(id,new Tipo.default(Tipo.tipos.DECREMENTO),_$[$0-2].first_line, _$[$0-2].first_column); 
	
break;
case 100:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column);
		this.$ = new Aritmetica.default(id,new Tipo.default(Tipo.tipos.INCREMENTO),_$[$0-2].first_line, _$[$0-2].first_column); 
	
break;
case 101:

		var tipo = new Tipo.default(Tipo.tipos.DO_WHILE);
		var nuevoCiclo = new DO_WHILE.default(tipo,_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-2],null);
		this.$ = nuevoCiclo;
	
break;
case 102:

		var tipo = new Tipo.default(Tipo.tipos.DO_WHILE);
		var nuevoCiclo = new DO_WHILE.default(tipo,_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-2],$$[$0-6]);
		this.$ = nuevoCiclo;
	
break;
case 103:

		var tipo = new Tipo.default(Tipo.tipos.WHILE);
		var nuevoCiclo = new WHILE.default(tipo,_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],$$[$0-1]);
		this.$ = nuevoCiclo;
	
break;
case 104:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],$$[$0-1],null);
		//pilaAuxiliar = [];
	
break;
case 105:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3],null,null);
		//pilaAuxiliar = [];
	
break;
case 106:

		//pilaAuxiliar.push($$[$0]);
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],$$[$0-2],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 107:

		//pilaAuxiliar.push($$[$0]);
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],null,pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 108:

		//pilaAuxiliar.push($$[$0])
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-3],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 109:

		//pilaAuxiliar.push($$[$0])
		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],null,pilaAuxiliar); //duda
		//pilaAuxiliar = [];
	
break;
case 110:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5],$$[$0-2],pilaAuxiliar);
		//pilaAuxiliar = [];
	
break;
case 111:

		this.$ = new IF.default(new Tipo.default(Tipo.tipos.IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],null,pilaAuxiliar); //duda
		//pilaAuxiliar = [];
	
break;
case 112: case 113:

		this.$ = pilaAuxiliar;
	
break;
case 114:

		var nuevo = new ELSE.default(new Tipo.default(Tipo.tipos.ELSE),_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-1]);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 115:

		var nuevo = new ELSE.default(new Tipo.default(Tipo.tipos.ELSE),_$[$0-2].first_line, _$[$0-2].first_column,null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 116:

		var nuevo = new IF.default(new Tipo.default(Tipo.tipos.ELSE_IF),_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-4],$$[$0-1],null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 117:

		var nuevo = new IF.default(new Tipo.default(Tipo.tipos.ELSE_IF),_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-3],null,null);
		pilaAuxiliar.push(nuevo);
		this.$ = pilaAuxiliar;
	
break;
case 118:

		var nTipo = new Tipo.default(Tipo.tipos.SWITCH);
		var nuevoSwitch = new SWITCH.default(nTipo,_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-4],$$[$0-1]);
		this.$ = nuevoSwitch;
	
break;
case 119:
		
		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	
break;
case 120:
this.$ = [$$[$0]];
break;
case 121:

		var nTipo = new Tipo.default(Tipo.tipos.CASE);
		var nuevoCase = new CASE.default(nTipo,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1],null);
		this.$ = nuevoCase;
	
break;
case 122:

		var nTipo = new Tipo.default(Tipo.tipos.CASE);
		var nuevoCase = new CASE.default(nTipo,_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-2],$$[$0]);
		this.$ = nuevoCase;		
	
break;
case 123:

		var nTipo = new Tipo.default(Tipo.tipos.DEFAULT);
		var nuevoCase = new CASE.default(nTipo,_$[$0-1].first_line, _$[$0-1].first_column,null,null);
		this.$ = nuevoCase;			
	
break;
case 124:

		var nTipo = new Tipo.default(Tipo.tipos.DEFAULT);
		var nuevoCase = new CASE.default(nTipo,_$[$0-2].first_line, _$[$0-2].first_column,null,$$[$0]);
		this.$ = nuevoCase;			
	
break;
case 125:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-7],_$[$0-10].first_line, _$[$0-10].first_column);
		var v = crearVector($$[$0-10],_$[$0-10].first_line, _$[$0-10].first_column,id,$$[$0-2],$$[$0-4],null);
		this.$ = new Declaracion.default(v.getId(),new Tipo.default(Tipo.tipos.VECTOR),_$[$0-10].first_line, _$[$0-10].first_column,v,null);	
		
break;
case 126:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5],_$[$0-8].first_line, _$[$0-8].first_column);
		var v = crearVector($$[$0-8],_$[$0-8].first_line, _$[$0-8].first_column,id,0,$$[$0-8],$$[$0-2]);
		this.$ = new Declaracion.default(v.getId(),new Tipo.default(Tipo.tipos.VECTOR),_$[$0-8].first_line, _$[$0-8].first_column,v,null);
		
break;
case 127:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-7],_$[$0-11].first_line, _$[$0-11].first_column);
		var l =  new Lista.default($$[$0-9],_$[$0-11].first_line, _$[$0-11].first_column,id,$$[$0-2]);
		this.$ = new Declaracion.default(id,new Tipo.default(Tipo.tipos.LISTA),_$[$0-11].first_line, _$[$0-11].first_column,l,null);
		
break;
case 128:
	
		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-3],_$[$0-7].first_line, _$[$0-7].first_column);
		var l =  new Lista.default($$[$0-5],_$[$0-7].first_line, _$[$0-7].first_column,id,new Tipo.default(Tipo.tipos.CARACTER));
		var asignacion = crearAsignacion(id,_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-1]);
		this.$ = new Declaracion.default(id,new Tipo.default(Tipo.tipos.LISTA),_$[$0-7].first_line, _$[$0-7].first_column,asignacion,l);
	
break;
case 129:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-6],_$[$0-6].first_line, _$[$0-6].first_column);
		var inst  = new llamadaArray.default(new Tipo.default(Tipo.tipos.ADD_LISTA),id,null,$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column);
		var asignacion = crearAsignacion(id,_$[$0-6].first_line, _$[$0-6].first_column,inst);
		this.$ = asignacion;
	
break;
case 130:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-8],_$[$0-8].first_line, _$[$0-8].first_column);
		//var entero = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0-5],10), _$[$0-8].first_line, _$[$0-8].first_column);
		var inst  = new llamadaArray.default(new Tipo.default(Tipo.tipos.ADD_LISTA),id,$$[$0-5],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column);
		var asignacion = crearAsignacion(id,_$[$0-8].first_line, _$[$0-8].first_column,inst);
		this.$ = asignacion;		
	
break;
case 131:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-6],_$[$0-6].first_line, _$[$0-6].first_column);
		//var entero = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0-4],10), _$[$0-6].first_line, _$[$0-6].first_column);
		var inst = new llamadaArray.default(new Tipo.default(Tipo.tipos.ADD_VECTOR),id,$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
		var asignacion = crearAsignacion(id,_$[$0-6].first_line, _$[$0-6].first_column,inst);
		this.$ = asignacion;
	
break;
case 132:

		$$[$0-2].push($$[$0]);
	
break;
case 133:

		this.$ = [$$[$0]];
	
break;
case 134:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column);
		//var entero = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0-1],10), _$[$0-3].first_line, _$[$0-3].first_column);
		this.$ = new llamadaArray.default(new Tipo.default(Tipo.tipos.LLAMADA_VECTOR),id,$$[$0-1],null,_$[$0-3].first_line, _$[$0-3].first_column);
	
break;
case 135:

		var id = new Identificador.default(new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
		//var entero = new Primitivo.default( new Tipo.default(Tipo.tipos.ENTERO),parseInt($$[$0-2],10), _$[$0-5].first_line, _$[$0-5].first_column);
		this.$ = new llamadaArray.default(new Tipo.default(Tipo.tipos.LLAMADA_LISTA),id,$$[$0-2],null,_$[$0-5].first_line, _$[$0-5].first_column);
	
break;
case 136:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
		this.$ = new Funcion.default($$[$0-6],nId,$$[$0-3],null,_$[$0-6].first_line, _$[$0-6].first_column);
	
break;
case 137:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-6], _$[$0-7].first_line, _$[$0-7].first_column);
		this.$ = new Funcion.default($$[$0-7],nId,$$[$0-4],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
	
break;
case 138:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);
		this.$ = new Funcion.default($$[$0-5],nId,null,null,_$[$0-5].first_line, _$[$0-5].first_column);
	
break;
case 139:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
		this.$ = new Funcion.default($$[$0-6],nId,null,$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
	
break;
case 140:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
		var nTipo = new Tipo.default(Tipo.tipos.VOID);
		this.$ = new Metodo.default(nTipo,nId,$$[$0-3],null,_$[$0-6].first_line, _$[$0-6].first_column);		
	
break;
case 141:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-6], _$[$0-7].first_line, _$[$0-7].first_column);
		var nTipo = new Tipo.default(Tipo.tipos.VOID);
		this.$ = new Metodo.default(nTipo,nId,$$[$0-4],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);	
	
break;
case 142:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);
		var nTipo = new Tipo.default(Tipo.tipos.VOID);
		this.$ = new Metodo.default(nTipo,nId,null,null,_$[$0-5].first_line, _$[$0-5].first_column);
	
break;
case 143:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
		var nTipo = new Tipo.default(Tipo.tipos.VOID);
		this.$ = new Metodo.default(nTipo,nId,null,$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
	
break;
case 144:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 145:

		this.$ = [$$[$0]]
	
break;
case 146:

		let ntipo = new Tipo.default(Tipo.tipos.PARAMETRO);
		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
		let nParametro = new Parametro.default(ntipo,_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1],nId,false,false);
		this.$ = nParametro;
		
	
break;
case 147:

		let ntipo1 = new Tipo.default(Tipo.tipos.PARAMETRO);
		var nId1 = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
		let nParametro1 = new Parametro.default(ntipo1,_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-3],nId1,false,true);
		this.$ = nParametro1;		
	
break;
case 148:

		let ntipo2 = new Tipo.default(Tipo.tipos.PARAMETRO);
		var nId2 = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
		let nParametro2 = new Parametro.default(ntipo2,_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2],nId2,true,false);
		this.$ = nParametro2;
	
break;
case 149:

		let rtipo = new Tipo.default(Tipo.tipos.LLAMADA_FUNCION);
		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column); 	
		this.$ = new llamadaFuncion.default(rtipo,nId,$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 		
	
break;
case 150:

		let nntipo = new Tipo.default(Tipo.tipos.LLAMADA_FUNCION);
		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 	
		this.$ = new llamadaFuncion.default(nntipo,nId,null,_$[$0-2].first_line, _$[$0-2].first_column); 
	
break;
case 151:
 
		this.$ = new Imprimir.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
	
break;
case 152:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column); 	
		var llamada = new llamadaFuncion.default(new Tipo.default(Tipo.tipos.LLAMADA_FUNCION),nId,$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column);
		this.$ = new Exec.default(new Tipo.default(Tipo.tipos.EXEC),_$[$0-4].first_line, _$[$0-4].first_column,llamada);
	
break;
case 153:

		var nId = new Identificador.default( new Tipo.default(Tipo.tipos.IDENTIFICADOR),$$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column); 	
		var llamada = new llamadaFuncion.default(new Tipo.default(Tipo.tipos.LLAMADA_FUNCION),nId,null,_$[$0-3].first_line, _$[$0-3].first_column);
		this.$ = new Exec.default(new Tipo.default(Tipo.tipos.EXEC),_$[$0-3].first_line, _$[$0-3].first_column,llamada);
	
break;
case 154:
 
		var print = new Imprimir.default($$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
		this.$ = new Exec.default(new Tipo.default(Tipo.tipos.EXEC),_$[$0-4].first_line, _$[$0-4].first_column,print);
	
break;
}
},
table: [{2:$V0,3:1,4:2,35:$V1,38:13,48:3,56:4,57:5,58:6,59:7,60:8,61:9,62:10,63:11,64:12,66:$V2,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{1:[3]},{2:$V0,5:[1,33],35:$V1,38:13,48:34,56:4,57:5,58:6,59:7,60:8,61:9,62:10,63:11,64:12,66:$V2,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vh,[2,44]),o($Vh,[2,66]),o($Vh,[2,67]),o($Vh,[2,68]),o($Vh,[2,69]),o($Vh,[2,70]),o($Vh,[2,71]),o($Vh,[2,72]),o($Vh,[2,73]),o($Vh,[2,74]),{53:[1,35]},o($Vh,[2,76]),{53:[1,36]},{35:$Vi,57:37,95:[1,38]},o($Vj,[2,79]),{25:[1,44],26:[1,43],27:$Vk,53:$Vl,69:40,70:$Vm,95:[1,42],100:[1,41]},{14:[1,48]},{27:[1,49]},{81:[1,50]},{27:[1,51]},{27:[1,52]},{27:[1,53]},{27:[1,54]},{35:[1,55],106:[1,56]},o($Vn,[2,87]),o($Vn,[2,88]),o($Vn,[2,89]),o($Vn,[2,90]),o($Vn,[2,91]),{35:[1,57]},{1:[2,1]},o($Vh,[2,43]),o($Vh,[2,75]),o($Vh,[2,77]),o($Vj,[2,78]),{96:[1,58]},{27:[1,59],53:$Vl,69:40,70:$Vm},o($Vj,[2,80]),{101:[1,60]},{6:62,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,95:[1,61],106:$Vf,107:$Vg},{53:[1,87]},{53:[1,88]},{6:91,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,28:[1,90],29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,98:89,106:$Vf,107:$Vg},o($Vj,[2,81]),{6:92,9:$Vo,10:64,17:65,23:$Vp,27:[1,93],29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{67:94,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7},{35:[1,99],56:96,57:97,67:98,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,79:95,104:$Ve},{2:$VG,35:$V1,38:115,49:101,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,100],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{6:119,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:120,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:121,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:122,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{27:[1,123]},{27:[1,124]},{27:[1,125]},{35:[1,126]},{28:[1,128],67:130,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,99:$VL,103:127,105:129},{27:[1,132]},{6:133,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{7:$VM,8:$VN,96:[1,134]},{6:137,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($VO,[2,5],{11:$VP,12:$VQ,13:[1,140],14:$VR,15:$VS,16:[1,143]}),o($VT,[2,12],{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$}),{17:152,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:153,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),o($V01,[2,29]),o($V01,[2,30],{27:$Vk,95:[1,154]}),o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),{27:[1,155]},{27:[1,156]},{27:[1,157]},{27:[1,158]},{27:[1,159]},{27:[1,160]},{27:[1,161]},{27:[1,162]},o($V11,[2,99]),o($V11,[2,100]),{28:[1,163],102:$V21},o($V01,[2,150]),o($V31,[2,133],{7:$VM,8:$VN}),{7:$VM,8:$VN,53:[1,165],74:[1,166]},{6:153,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,71:[1,167],72:[1,168],73:[1,169],106:$Vf,107:$Vg},{15:[1,170]},{6:171,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($V41,[2,94]),o($V41,[2,95]),{35:$Vi,57:37},{53:$Vl,69:40,70:$Vm},{84:[1,172]},{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,173],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V51,[2,46]),o($V51,[2,47]),{53:[1,175]},{53:[1,176]},o($V51,[2,52]),o($V51,[2,53]),o($V51,[2,54]),o($V51,[2,55]),o($V51,[2,56]),o($V51,[2,57]),o($V51,[2,58]),o($V51,[2,59]),o($V51,[2,60]),{53:[1,177]},{6:178,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,53:[1,179],106:$Vf,107:$Vg},o($V51,[2,64]),{53:[1,180]},{7:$VM,8:$VN,28:[1,181]},{7:$VM,8:$VN,28:[1,182]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,183]},{7:$VM,8:$VN,28:[1,184]},{6:91,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,28:[1,186],29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,98:185,106:$Vf,107:$Vg},{17:187,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{28:[1,189],67:130,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,99:$VL,103:188,105:129},{70:[1,190]},{28:[1,191],102:$V61},{81:[1,193]},o($V71,[2,145]),{35:[1,194],95:[1,195]},{14:[1,196]},{6:197,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{7:$VM,8:$VN,96:[1,198]},{70:[1,199]},{6:200,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:201,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($VO,[2,4]),{10:202,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{10:203,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{10:204,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{10:205,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{10:206,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{10:207,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:208,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:209,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:210,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:211,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:212,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:213,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($V01,[2,21]),o($V01,[2,22]),o($V01,[2,20]),{7:$VM,8:$VN,28:[1,214]},{6:215,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,95:[1,216],106:$Vf,107:$Vg},{17:217,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:218,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:219,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:220,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:221,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{17:222,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:223,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:224,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($V01,[2,149]),{6:225,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($Vj,[2,82]),{6:226,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{28:[1,227]},{28:[1,228]},{28:[1,229]},{35:[1,230]},{7:$VM,8:$VN,53:[1,231]},{27:[1,232]},{84:[1,233]},o($V51,[2,45]),o($V51,[2,48]),o($V51,[2,49]),o($V51,[2,61]),{7:$VM,8:$VN,53:[1,234]},o($V51,[2,63]),o($V51,[2,65]),{81:[1,235]},{81:[1,236]},{81:[1,237]},o($V01,[2,151]),{28:[1,238],102:$V21},o($V01,[2,153]),{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,239]},{28:[1,240],102:$V61},{81:[1,241]},{81:[1,243],97:[1,242]},{81:[1,244]},{67:130,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,99:$VL,105:245},{2:$VG,35:$V1,38:115,51:248,55:247,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,246],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V71,[2,146]),{96:[1,249]},{67:250,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7},{7:$VM,8:$VN,28:[1,251]},{96:[1,252]},{6:253,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($VO,[2,2]),o([8,28,53,74,75,82,96,102],[2,3],{7:$VM}),o($VT,[2,6]),o($VT,[2,7]),o($V81,[2,8],{11:$VP,12:$VQ,14:$VR,15:$VS}),o($VT,[2,9]),o($VT,[2,10]),o($V81,[2,11],{11:$VP,12:$VQ,14:$VR,15:$VS}),o($V91,[2,14]),o($V91,[2,15],{19:$VU}),o($V91,[2,16],{19:$VU}),o($V91,[2,17],{19:$VU}),o($Va1,[2,18],{19:$VU,20:$VV,21:$VW,22:$VX}),o($Va1,[2,19],{19:$VU,20:$VV,21:$VW,22:$VX}),o($V01,[2,23]),{7:$VM,8:$VN,96:[1,254]},{6:255,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,256]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,257]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,258]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,259]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,260]},{19:$VU,20:$VV,21:$VW,22:$VX,23:$VY,24:$VZ,25:$V_,26:$V$,28:[1,261]},{7:$VM,8:$VN,28:[1,262]},{7:$VM,8:$VN,28:[1,263]},o($V31,[2,132],{7:$VM,8:$VN}),{7:$VM,8:$VN,75:[1,264]},{6:265,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:266,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{6:267,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{70:[1,268]},{35:[1,270],80:269},{6:271,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{27:[1,272]},o($V51,[2,62]),{2:$VG,35:$V1,38:115,49:273,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{2:$VG,35:$V1,38:115,49:274,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,275],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{91:276,92:277,93:$Vb1,94:$Vc1},o($V01,[2,152]),o($V01,[2,154]),{81:[1,280]},{2:$VG,35:$V1,38:115,51:248,55:282,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,281],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{67:283,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7},{6:91,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,98:284,106:$Vf,107:$Vg},{2:$VG,35:$V1,38:115,51:248,55:286,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,285],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V71,[2,144]),o($Vj,[2,138]),{2:$VG,35:$V1,38:115,51:288,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,287],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vd1,[2,51]),{35:[1,289]},{15:[1,290]},{53:[1,291]},{70:[1,292]},{7:$VM,8:$VN,53:[1,293]},o($V01,[2,134]),{7:$VM,8:$VN,96:[1,294]},o($V01,[2,35]),o($V01,[2,36]),o($V01,[2,37]),o($V01,[2,38]),o($V01,[2,39]),o($V01,[2,40]),o($V01,[2,41]),o($V01,[2,42]),{6:295,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{7:$VM,8:$VN,53:[1,296]},{7:$VM,8:$VN,53:[1,297]},{7:$VM,8:$VN,53:[1,298]},{39:300,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,97:[1,299]},{28:[1,301]},{25:[1,303],26:[1,302],70:[1,304]},{7:$VM,8:$VN,28:[1,305]},{6:306,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,307],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,308],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V11,[2,105],{86:309,87:310,88:312,89:$Ve1}),{82:[1,313],92:314,93:$Vb1,94:$Vc1},o($Vf1,[2,120]),{6:315,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{75:[1,316]},{2:$VG,35:$V1,38:115,51:248,55:318,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,317],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vj,[2,142]),{2:$VG,35:$V1,38:115,51:288,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,319],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{95:[1,320]},{82:[1,321],102:$V21},o($Vj,[2,136]),{2:$VG,35:$V1,38:115,51:288,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,322],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vj,[2,139]),o($Vd1,[2,50]),o($V71,[2,147]),{35:[1,323]},o($V11,[2,129]),{6:324,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($V11,[2,131]),{96:[1,325]},{7:$VM,8:$VN,53:[1,326]},o($Vj,[2,83]),o($Vj,[2,84]),o($Vj,[2,85]),{99:[1,327]},{53:[1,328]},{81:[1,329]},{28:[2,96]},{28:[2,97]},{6:330,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},{53:[1,331]},{7:$VM,8:$VN,28:[1,332]},o($V11,[2,103]),o($V11,[2,104],{88:312,86:333,87:334,89:$Ve1}),o($V11,[2,107]),o($V11,[2,111],{86:335,88:336,89:$Ve1}),{81:[1,337],85:[1,338]},o($Vg1,[2,113]),o($V11,[2,118]),o($Vf1,[2,119]),{7:$VM,8:$VN,75:[1,339]},o($Vf1,[2,123],{67:16,68:17,50:102,51:103,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,38:115,49:340,2:$VG,35:$V1,52:$VH,54:$VI,65:$VJ,66:$VK,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg}),o($Vj,[2,140]),{2:$VG,35:$V1,38:115,51:288,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,341],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vj,[2,143]),{29:[1,342]},{53:[1,343]},o($Vj,[2,137]),o($V71,[2,148]),{7:$VM,8:$VN,53:[1,344]},o($V01,[2,135]),o($Vj,[2,86]),{14:[1,345]},o($V11,[2,128]),{2:$VG,35:$V1,38:115,49:347,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,346],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{7:$VM,8:$VN,28:[2,98]},o($V11,[2,101]),{53:[1,348]},o($V11,[2,106]),o($V11,[2,110],{88:336,86:349,89:$Ve1}),o($V11,[2,109]),o($Vg1,[2,112]),{2:$VG,35:$V1,38:115,49:350,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,351],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{27:[1,352]},o($Vf1,[2,121],{67:16,68:17,50:102,51:103,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,38:115,49:353,2:$VG,35:$V1,52:$VH,54:$VI,65:$VJ,66:$VK,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg}),o($Vf1,[2,124],{67:16,68:17,51:103,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,38:115,50:174,2:$VG,35:$V1,52:$VH,54:$VI,65:$VJ,66:$VK,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg}),o($Vj,[2,141]),{96:[1,354]},o($V11,[2,126]),o($V11,[2,130]),{67:355,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7},o($V11,[2,92]),{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,356],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V11,[2,102]),o($V11,[2,108]),{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,357],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($V11,[2,115]),{6:358,9:$Vo,10:64,17:65,23:$Vp,27:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu,33:$Vv,34:$Vw,35:$Vx,36:75,37:76,38:77,39:78,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,106:$Vf,107:$Vg},o($Vf1,[2,122],{67:16,68:17,51:103,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,38:115,50:174,2:$VG,35:$V1,52:$VH,54:$VI,65:$VJ,66:$VK,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg}),{53:[1,359]},{15:[1,360]},o($V11,[2,93]),o($V11,[2,114]),{7:$VM,8:$VN,28:[1,361]},o($V11,[2,125]),{53:[1,362]},{81:[1,363]},o($V11,[2,127]),{2:$VG,35:$V1,38:115,49:364,50:102,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,365],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},{2:$VG,35:$V1,38:115,50:174,51:103,52:$VH,54:$VI,56:106,57:107,58:108,59:109,60:110,61:111,62:112,63:113,64:114,65:$VJ,66:$VK,67:16,68:17,71:$V3,72:$V4,73:$V5,76:$V6,77:$V7,78:$V8,82:[1,366],83:$V9,84:$Va,85:$Vb,90:$Vc,99:$Vd,104:$Ve,106:$Vf,107:$Vg},o($Vg1,[2,117]),o($Vg1,[2,116])],
defaultActions: {33:[2,1],302:[2,96],303:[2,97]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Excepcion = require('../Excepciones/Excepcion');
    const Tipo = require('../tablaSimbolos/Tipo');
    const Arbol = require('../tablaSimbolos/Arbol');
    const Primitivo = require('../Expresiones/Primitivo');
    const Imprimir = require('../Instrucciones/Imprimir');
	const Aritmetica = require('../Expresiones/Aritmetica');
	const Relacional = require('../Expresiones/Relacional');
	const Logica = require('../Expresiones/Logica');
	const Identificador = require('../Expresiones/Identificador');
	const Declaracion = require('../Expresiones/Declaracion');
	const Vector = require('../Expresiones/Vector');
	const Lista = require('../Expresiones/Lista');
	const Funcion = require('../Expresiones/Funcion');
	const Metodo = require('../Expresiones/Metodo');
	const Ternario = require('../Expresiones/Ternario');
	const Parametro = require('../Expresiones/Parametro');
	const toUpper = require('../Instrucciones/toUpper');
	const toLower = require('../Instrucciones/toLower');
	const Length = require('../Instrucciones/Length');
	const Truncate = require('../Instrucciones/Truncate');
	const Round = require('../Instrucciones/Round');
	const Typeof = require('../Instrucciones/Typeof');
	const ToString = require('../Instrucciones/toString');
	const ToCharArray = require('../Instrucciones/toCharArray');
	const Casteo = require('../Instrucciones/Casteo');
	const Exec = require('../Instrucciones/Exec');
	const llamadaFuncion = require('../Instrucciones/llamadaFuncion');
	const llamadaArray = require('../Instrucciones/llamadaArray');
	const Asignacion = require('../Expresiones/Asignacion');
	const Agrupacion = require('../Expresiones/Agrupacion');
	const IF = require('../Sentencias/IF');
	const ELSE = require('../Sentencias/ELSE');
	const WHILE = require('../Sentencias/WHILE');
	const DO_WHILE = require('../Sentencias/DO_WHILE');
	const SWITCH = require('../Sentencias/SWITCH');
	const CASE = require('../Sentencias/CASE');
	const BREAK = require('../Sentencias/BREAK');
	const CONTINUE = require('../Sentencias/CONTINUE');
	const RETURN = require('../Sentencias/RETURN');
	const FOR = require('../Sentencias/FOR');
	var pilaAuxiliar = [];
	function crearVector(tipo,linea,columna,id,size,tipo_creacion,valor){
		var nuevoVector = new Vector.default(tipo,linea,columna,id,parseInt(size),tipo_creacion,valor);
		//pilaAuxiliar = [];
		return nuevoVector;
	}
	function crearToUpper(expresion, linea, columna, retorno){
		var nuevoNodo = new toUpper.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearToLower(expresion, linea, columna, retorno){
		var nuevoNodo = new toLower.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearLength(expresion, linea, columna, retorno){
		var nuevoNodo = new Length.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearTruncate(expresion, linea, columna, retorno){
		var nuevoNodo = new Truncate.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearRound(expresion, linea, columna, retorno){
		var nuevoNodo = new Round.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearTypeof(expresion, linea, columna, retorno){
		var nuevoNodo = new Typeof.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearToString(expresion, linea, columna, retorno){
		var nuevoNodo = new ToString.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearToCharArray(expresion, linea, columna, retorno){
		var nuevoNodo = new ToCharArray.default(expresion, linea, columna, retorno);
		//pilaAuxiliar = [];
		return nuevoNodo;
	}
	function crearAsignacion(id,linea,columna,instruccion){
		var tipo = new Tipo.default(Tipo.tipos.ASIGNACION);
		var nuevaAsignacion = new Asignacion.default(id,tipo,linea,columna,instruccion);
		//pilaAuxiliar = [];
		return nuevaAsignacion;
	}	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:/*Ignorar comentario multilínea*/
break;
case 2:/*Retornos de carro y nuevas líneas*/
break;
case 3:/*Saltos de línea*/
break;
case 4:/*Espacios en blanco*/
break;
case 5:return "IF";
break;
case 6:return "ELSE";
break;
case 7:return "FOR";
break;
case 8:return "WHILE";
break;
case 9:return "DO";
break;
case 10:return "SWITCH";
break;
case 11:return "CASE";
break;
case 12:return "DEFAULT";
break;
case 13:return "INT";
break;
case 14:return "DOUBLE";
break;
case 15:return "BOOLEAN";
break;
case 16:return "CHAR";
break;
case 17:return "STRING";
break;
case 18:yy_.yytext = yy_.yytext.substr(1,(yy_.yyleng-2)); return "CADENA";
break;
case 19:yy_.yytext = yy_.yytext.substr(1,(yy_.yyleng-2)); return "CARACTER";
break;
case 20:return "SALTO_LINEA_T";
break;
case 21:return "DOBLE_BARRA_T";
break;
case 22:return "COMILLAS_T";
break;
case 23:return "TABULADOR_T";
break;
case 24:return "COMILLA_T"
break;
case 25:return "COMILLA";
break;
case 26:return "COMILLAS";
break;
case 27:return "VOID";
break;
case 28:return "PRINT";
break;
case 29:return "TO_LOWER";
break;
case 30:return "TO_UPPER";
break;
case 31:return "LENGTH";
break;
case 32:return "ROUND";
break;
case 33:return "TYPEOF";
break;
case 34:return "TO_STRING";
break;
case 35:return "TO_CHAR_ARRAY";
break;
case 36:return "EXEC";
break;
case 37:return "TRUNCATE";
break;
case 38:return "CONTINUE";
break;
case 39:return "BREAK";
break;
case 40:return "RETURN";
break;
case 41:return 11;
break;
case 42:return 12;
break;
case 43:return 13;
break;
case 44:return 16;
break;
case 45:return 15;
break;
case 46:return 14;
break;
case 47:return 19;
break;
case 48:return 25;
break;
case 49:return 24;
break;
case 50:return 26;
break;
case 51:return 23;
break;
case 52:return 20;
break;
case 53:return 22;
break;
case 54:return 21;
break;
case 55:return "ADD";
break;
case 56:return "NEW";
break;
case 57:return "LISTA";
break;
case 58:return 53;
break;
case 59:return 75;
break;
case 60:return 102;
break;
case 61:return 27;
break;
case 62:return 28;
break;
case 63:return 95;
break;
case 64:return 96;
break;
case 65:return 81;
break;
case 66:return 82;
break;
case 67:return "PUNTO";
break;
case 68:return 31;
break;
case 69:return 32;
break;
case 70:return 74;
break;
case 71:return 70;
break;
case 72:return 7;
break;
case 73:return 8;
break;
case 74:return 9;
break;
case 75:return 35;
break;
case 76:return 30;
break;
case 77:return 29;
break;
case 78:return 5;
break;
case 79: return 66 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:"[^\n\r"\""|"\\\\""\""]*")/i,/^(?:'[^\n\r]?')/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\\\')/i,/^(?:\\')/i,/^(?:")/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:truncate\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:add\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-z]([a-z]|[0-9]|_)*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}